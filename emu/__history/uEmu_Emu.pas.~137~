unit uEmu_Emu;

interface

uses
  System.Classes,
  System.SysUtils, System.AnsiStrings;

procedure Mouse_Action(vAction: String);
procedure Key_Action(vAction: String);
procedure Joy_Action(vAction: String);

procedure Key_View_Mode(vKey: String);
procedure Key_View_Mode_Up(vKey: String);

implementation

uses
  uDB_AUser,
  uEmu_Actions,
  {Arcade}
  uEmu_Arcade_Mame_Mouse,
  uEmu_Arcade_Mame_Keyboard,

  {Consoles}
  uEmu_Consoles_Nes_Actions,

  {View Modes Keyboard}
  uView_Mode_Default_Key,
  {End View Modes Keyboard}
  emu,
  uLoad_AllTypes;

procedure Mouse_Action(vAction: String);
begin
  if emulation.Category_Num = 0 then
  begin
    if ContainsText(extrafe.prog.State, 'emu_mame') then
      uEmu_Arcade_Mame_Mouse.Action(vAction);
  end
  else if emulation.Category_Num = 2 then
  begin
    if ContainsText(extrafe.prog.State, 'emu_nes') then
      uEmu_Consoles_Nes_Actions.Action(vAction);
  end;

end;

procedure Key_Action(vAction: String);
var
  vInt: Integer;
  vInt2: Integer;
begin
  vInt := Trunc(uDB_AUser.Local.EMULATORS.Active_Unique);
  vInt2 := FloatToStr(Frac(uDB_AUser.Local.EMULATORS.Active_Unique)).ToInteger;
  case vInt of
    0:
      case vInt2 of
        0:
          uEmu_Arcade_Mame_Keyboard.Action(vAction);
      end;
    1:
      ;
  end;
end;

procedure Joy_Action(vAction: String);
begin

end;

procedure Key_View_Mode(vKey: String);
begin
  if uEmu_Actions.vCurrent_View_Mode = 'Default' then
    uView_Mode_Default_Key.Key(vKey);
end;

procedure Key_View_Mode_Up(vKey: String);
begin
  if uEmu_Actions.vCurrent_View_Mode = 'Default' then
    uView_Mode_Default_Key.Key_Up(vKey);
end;

end.
