unit uVirtual_Keyboard;

interface

uses
  System.Classes,
  System.SysUtils,
  System.UiTypes,
  System.UiConsts,
  System.StrUtils,
  FMX.Forms,
  FMX.Objects,
  FMX.Effects,
  FMX.Filter.Effects,
  FMX.Types,
  FMX.Edit,
  FMX.StdCtrls,
  FMX.Layouts,
  FMX.Ani;

type
  TANIMATION = class(TObject)
    procedure OnFinish(Sender: TObject);
  end;

type
  TVIRTUAL_KEYBOARD_IMAGE = class(TObject)
    procedure OnMouseClick(Sender: TObject);
    procedure OnMouseEnter(Sender: TObject);
    procedure OnMouseLeave(Sender: TObject);
  end;

type
  TVIRTUAL_KEYBOARD_TEXT = class(TObject)
    procedure OnMouseClick(Sender: TObject);
    procedure OnMouseEnter(Sender: TObject);
    procedure OnMouseLeave(Sender: TObject);
  end;

type
  TVIRTUAL_KEYBOARD_RECTANGLE = class(TObject)
    procedure OnMouseClick(Sender: TObject);
    procedure OnMouseEnter(Sender: TObject);
    procedure OnMouseLeave(Sender: TObject);
  end;

type
  TVIRTUAL_KEYBOARD_MOUSE = record
    Image: TVIRTUAL_KEYBOARD_IMAGE;
    Text: TVIRTUAL_KEYBOARD_TEXT;
    Rectangle: TVIRTUAL_KEYBOARD_RECTANGLE;
  end;

type
  TCONTRUCTION_TITLE = record
    Back: TRectangle;
    Game_Icon: TImage;
    Text: TText;
  end;

type
  TCONTRUCTION_EDIT = record
    Back: TRectangle;
    Edit: TEdit;
    Icon: TText;
  end;

type
  TCONTRUCTION_DROPMENU = record
    Back: TRectangle;
    Box: TVertScrollBox;
    Line_Back: array [0 .. 21] of TRectangle;
    Icon: array [0 .. 21] of TImage;
    Text: array [0 .. 21] of TText;
  end;

type
  TCONTRUCTION_KEYS = record
    Shape: array [0 .. 60] of TRectangle;
    Symbol: array [0 .. 60] of TText;
  end;

type
  TCONSTRUCTION = record
    Frame: TLayout;
    Ani: TFloatAnimation;
    Blur: TGaussianBlurEffect;
    Blur_Ani: TFloatAnimation;
    Back: TRectangle;
    Title: TCONTRUCTION_TITLE;
    Edit: TCONTRUCTION_EDIT;
    Drop: TCONTRUCTION_DROPMENU;
    Keys: TCONTRUCTION_KEYS;
  end;

type
  TOPTIONS = record
    Previus_State: String;
    vType: String;
    Drop_Num: Integer;
    Drop_Current: Integer;
    Symbol: Boolean;
    Capital: Boolean;
    Shift: Boolean;
  end;

type
  TVIRTUAL_KEYBOARD_ACTION = record
    Construct: TCONSTRUCTION;
    Options: TOPTIONS;
    Mouse: TVIRTUAL_KEYBOARD_MOUSE;
    Animation: TANIMATION;
    Enter_Pressed: Boolean;
  end;

const
  cVirtual_Keyboard_Keys: array [0 .. 50] of string = ('English', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Back', 'Caps Lock', 'q', 'w', 'e', 'r',
    't', 'y', 'u', 'i', 'o', 'p', 'Enter', 'Shift', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':', '', 'Symbols', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '.',
    '/', '@', 'Space', '<', '>', 'Exit');
  cVirtual_Keyboard_Keys_Capital: array [0 .. 50] of string = ('', '', '', '', '', '', '', '', '', '', '', '', '', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O',
    'P', '', '', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', '', '', '', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '', '', '', '', '', '', '');
  cVirtual_Keyboard_Keys_Symbols: array [0 .. 50] of string = ('', '', '!', '@', '#', '$', '%', '^', '&', '`', '', '', '', '', '(', ')', '[', ']', '{', '}',
    '<', '>', '', '', '', '', '*', '/', '+', '-', '_', '+', '\', '?', '', '', '', '', '''', '"', ',', '.', '|', '~', ';', ':', '', '', '', '', '');
  cVirtual_Keyboard_Keys_Shift: array [0 .. 50] of string = ('', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '', '', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U',
    'I', 'O', 'P', '', '', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', '', '', '', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '', '', '', '', '', '', '');

var
  VKey: TVIRTUAL_KEYBOARD_ACTION;

procedure Create(Sender: TObject; vType, vTitle: String; vImage: TImage);
procedure VK_Free;

procedure Set_Capital(vActive: Boolean);
procedure Set_Symbols(vActive: Boolean);
procedure Set_Shift(vActive: Boolean);

procedure Drop(vLine: Integer; vString: String; vImagePath: String);

procedure Key(vActionKey: String);

procedure Press(vActionKey: String);

Procedure Backspace;

procedure Animation(vState: Boolean);

procedure Clear_Drop;

implementation

uses
  emu,
  uLoad,
  uLoad_AllTypes,
  uEmu_Actions, uDB_AUser;

procedure Animation(vState: Boolean);
begin
  if vState then
  begin
    VKey.Construct.Ani.StartValue := uDB_AUser.Local.SETTINGS.Resolution.Height + 1;
    VKey.Construct.Ani.StopValue := uDB_AUser.Local.SETTINGS.Resolution.Height - 250;
    VKey.Construct.Ani.Start;
    VKey.Construct.Blur.Enabled := True;
    VKey.Construct.Blur_Ani.StartValue := 0;
    VKey.Construct.Blur_Ani.StopValue := 1;
    VKey.Construct.Blur_Ani.Start;
  end
  else
  begin
    VKey.Enter_Pressed := True;
    VKey.Construct.Ani.StartValue := uDB_AUser.Local.SETTINGS.Resolution.Height - 250;
    VKey.Construct.Ani.StopValue := uDB_AUser.Local.SETTINGS.Resolution.Height + 1;
    VKey.Construct.Ani.Start;
    VKey.Construct.Blur_Ani.StartValue := 1;
    VKey.Construct.Blur_Ani.StopValue := 0;
    VKey.Construct.Blur_Ani.Start;
  end;
end;

procedure Create(Sender: TObject; vType, vTitle: String; vImage: TImage);
var
  vi, vfi: Integer;
begin
  VKey.Options.Previus_State := extrafe.prog.State;
  extrafe.prog.State := 'virtual_keyboard';
  VKey.Enter_Pressed := False;
  VKey.Options.vType := vType;

  if not Assigned(VKey.Construct.Frame) then
  begin
    VKey.Construct.Frame := TLayout(Sender);
    VKey.Construct.Frame.Align := TAlignLayout.Client;
    VKey.Construct.Frame.Visible := True;
  end;

  VKey.Construct.Blur := TGaussianBlurEffect.Create(vImage);
  VKey.Construct.Blur.Name := 'Virtual_Keyboard_Emu_Blur';
  VKey.Construct.Blur.Parent := vImage;
  VKey.Construct.Blur.BlurAmount := 0;
  VKey.Construct.Blur.Enabled := False;

  VKey.Construct.Blur_Ani := TFloatAnimation.Create(VKey.Construct.Blur);
  VKey.Construct.Blur_Ani.Name := 'Virtual_Keyboard_Back_Blur_Animation';
  VKey.Construct.Blur_Ani.Parent := VKey.Construct.Blur;
  VKey.Construct.Blur_Ani.PropertyName := 'BlurAmount';
  VKey.Construct.Blur_Ani.AnimationType := TAnimationType.&In;
  VKey.Construct.Blur_Ani.Duration := 0.3;

  VKey.Construct.Back := TRectangle.Create(VKey.Construct.Frame);
  VKey.Construct.Back.Name := 'Virtual_Keyboard';
  VKey.Construct.Back.Parent := VKey.Construct.Frame;
  VKey.Construct.Back.SetBounds(uDB_AUser.Local.SETTINGS.Resolution.Half_Width - 400, extrafe.res.Height + 1, 800, 500);
  VKey.Construct.Back.XRadius := 8;
  VKey.Construct.Back.YRadius := 8;
  VKey.Construct.Back.Stroke.Thickness := 8;
  VKey.Construct.Back.Stroke.Color := TAlphaColorRec.Deepskyblue;
  VKey.Construct.Back.Fill.Color := StringToAlphaColor('#FF01182E');
  VKey.Construct.Back.Visible := True;

  VKey.Construct.Ani := TFloatAnimation.Create(VKey.Construct.Back);
  VKey.Construct.Ani.Name := 'Virtual_Keyboard_Animation';
  VKey.Construct.Ani.Parent := VKey.Construct.Back;
  VKey.Construct.Ani.AnimationType := TAnimationType.&In;
  VKey.Construct.Ani.Interpolation := TInterpolationType.Quadratic;
  VKey.Construct.Ani.PropertyName := 'Position.Y';
  VKey.Construct.Ani.OnFinish := VKey.Animation.OnFinish;
  VKey.Construct.Ani.Duration := 0.3;

  // Title
  VKey.Construct.Title.Back := TRectangle.Create(VKey.Construct.Back);
  VKey.Construct.Title.Back.Name := 'Virtual_Keyboard_BackTitle';
  VKey.Construct.Title.Back.Parent := VKey.Construct.Back;
  VKey.Construct.Title.Back.SetBounds(8, 8, VKey.Construct.Back.Width - 16, 30);
  VKey.Construct.Title.Back.XRadius := 4;
  VKey.Construct.Title.Back.YRadius := 4;
  VKey.Construct.Title.Back.Stroke.Thickness := 4;
  VKey.Construct.Title.Back.Stroke.Color := TAlphaColorRec.Black;
  VKey.Construct.Title.Back.Fill.Color := StringToAlphaColor('#FF010709');
  VKey.Construct.Title.Back.Corners := VKey.Construct.Title.Back.Corners - [TCorner.BottomLeft, TCorner.BottomRight];
  VKey.Construct.Title.Back.Visible := True;

  VKey.Construct.Title.Game_Icon := TImage.Create(VKey.Construct.Title.Back);
  VKey.Construct.Title.Game_Icon.Name := 'Virtual_Keyboard_Game_Icon';
  VKey.Construct.Title.Game_Icon.Parent :=  VKey.Construct.Title.Back;
  VKey.Construct.Title.Game_Icon.SetBounds(10, 2, 28, 28);
  VKey.Construct.Title.Game_Icon.WrapMode := TImageWrapMode.Fit;
  VKey.Construct.Title.Game_Icon.Visible := True;

  VKey.Construct.Title.Text := TText.Create(VKey.Construct.Title.Back);
  VKey.Construct.Title.Text.Name := 'Virtual_Keyboard_Title';
  VKey.Construct.Title.Text.Parent := VKey.Construct.Title.Back;
  VKey.Construct.Title.Text.SetBounds(42, 1, VKey.Construct.Title.Back.Width - 42, 28);
  VKey.Construct.Title.Text.Color := TAlphaColorRec.Deepskyblue;
  VKey.Construct.Title.Text.Font.Family := 'Tahoma';
  VKey.Construct.Title.Text.Font.Size := 16;
  VKey.Construct.Title.Text.Font.Style := VKey.Construct.Title.Text.Font.Style + [TFontStyle.fsBold];
  VKey.Construct.Title.Text.Text := vTitle;
  VKey.Construct.Title.Text.HorzTextAlign := TTextAlign.Leading;
  VKey.Construct.Title.Text.VertTextAlign := TTextAlign.Center;
  VKey.Construct.Title.Text.Visible := True;

  VKey.Construct.Edit.Back := TRectangle.Create(VKey.Construct.Back);
  VKey.Construct.Edit.Back.Name := 'Virtual_Keyboard_BackEdit';
  VKey.Construct.Edit.Back.Parent := VKey.Construct.Back;
  VKey.Construct.Edit.Back.SetBounds(8, 36, VKey.Construct.Back.Width - 16, 40);
  VKey.Construct.Edit.Back.XRadius := 4;
  VKey.Construct.Edit.Back.YRadius := 4;
  VKey.Construct.Edit.Back.Stroke.Thickness := 4;
  VKey.Construct.Edit.Back.Stroke.Color := TAlphaColorRec.Black;
  VKey.Construct.Edit.Back.Fill.Color := StringToAlphaColor('#FF010709');
  VKey.Construct.Edit.Back.Corners := VKey.Construct.Edit.Back.Corners - [TCorner.BottomLeft, TCorner.BottomRight];
  VKey.Construct.Edit.Back.Visible := True;

  VKey.Construct.Edit.Edit := TEdit.Create(VKey.Construct.Edit.Back);
  VKey.Construct.Edit.Edit.Name := 'Virtual_Keyboard_Edit';
  VKey.Construct.Edit.Edit.Parent := VKey.Construct.Edit.Back;
  VKey.Construct.Edit.Edit.SetBounds(10, 4, VKey.Construct.Edit.Back.Width - 20, 32);
  VKey.Construct.Edit.Edit.Text := '';
  VKey.Construct.Edit.Edit.ReadOnly := True;
  VKey.Construct.Edit.Edit.Caret.Color := TAlphaColorRec.Deepskyblue;
  VKey.Construct.Edit.Edit.TextSettings.FontColor := TAlphaColorRec.Deepskyblue;
  VKey.Construct.Edit.Edit.TextSettings.Font.Size := 18;
  VKey.Construct.Edit.Edit.StyledSettings := VKey.Construct.Edit.Edit.StyledSettings - [TStyledSetting.FontColor, TStyledSetting.Size];
  VKey.Construct.Edit.Edit.TextSettings.HorzAlign := TTextAlign.Center;
  VKey.Construct.Edit.Edit.Visible := True;

  VKey.Construct.Edit.Icon := TText.Create(VKey.Construct.Edit.Edit);
  VKey.Construct.Edit.Icon.Name := 'Virtual_Keyboard_Icon_Edit';
  VKey.Construct.Edit.Icon.Parent := VKey.Construct.Edit.Edit;
  VKey.Construct.Edit.Icon.SetBounds(1, 1, 28, 28);
  VKey.Construct.Edit.Icon.Font.Family := 'IcoMoon-Free';
  VKey.Construct.Edit.Icon.Font.Size := 20;
  VKey.Construct.Edit.Icon.TextSettings.FontColor := TAlphaColorRec.Deepskyblue;
  VKey.Construct.Edit.Icon.Text := #$e986;
  VKey.Construct.Edit.Icon.Visible := True;

  VKey.Construct.Drop.Back := TRectangle.Create(VKey.Construct.Back);
  VKey.Construct.Drop.Back.Name := 'Virtual_Keyboard_Drop_Background';
  VKey.Construct.Drop.Back.Parent := VKey.Construct.Back;
  VKey.Construct.Drop.Back.SetBounds(8, 74, VKey.Construct.Back.Width - 16, 0);
  VKey.Construct.Drop.Back.XRadius := 4;
  VKey.Construct.Drop.Back.YRadius := 4;
  VKey.Construct.Drop.Back.Stroke.Thickness := 4;
  VKey.Construct.Drop.Back.Stroke.Color := TAlphaColorRec.Black;
  VKey.Construct.Drop.Back.Fill.Color := StringToAlphaColor('#FF010709');
  VKey.Construct.Drop.Back.Corners := VKey.Construct.Drop.Back.Corners - [TCorner.TopLeft, TCorner.TopRight];
  VKey.Construct.Drop.Back.Visible := True;

  VKey.Construct.Drop.Box := TVertScrollBox.Create(VKey.Construct.Drop.Back);
  VKey.Construct.Drop.Box.Name := 'Virtual_Keyboard_Drop_Box';
  VKey.Construct.Drop.Box.Parent := VKey.Construct.Drop.Back;
  VKey.Construct.Drop.Box.Align := TAlignLayout.Client;
  VKey.Construct.Drop.Box.Visible := True;

  vfi := 0;
  for vi := 0 to 50 do
  begin
    VKey.Construct.Keys.Shape[vi] := TRectangle.Create(VKey.Construct.Back);
    VKey.Construct.Keys.Shape[vi].Name := 'Virtual_Keyboard_Key_' + IntToStr(vi);
    VKey.Construct.Keys.Shape[vi].Parent := VKey.Construct.Back;
    if vi = 11 then
    begin
      VKey.Construct.Keys.Shape[vi].Width := 80;
      VKey.Construct.Keys.Shape[vi].Height := 50;
      VKey.Construct.Keys.Shape[vi].Position.X := (50 * 10) + 170;
      VKey.Construct.Keys.Shape[vi].Position.Y := 220;
    end
    else if vi = 23 then
    begin
      VKey.Construct.Keys.Shape[vi].Width := 80;
      VKey.Construct.Keys.Shape[vi].Height := 100;
      VKey.Construct.Keys.Shape[vi].Position.X := (50 * 10) + 170;
      VKey.Construct.Keys.Shape[vi].Position.Y := 270;
    end
    else if vi = 47 then
    begin
      VKey.Construct.Keys.Shape[vi].Width := 300;
      VKey.Construct.Keys.Shape[vi].Height := 50;
      VKey.Construct.Keys.Shape[vi].Position.X := (50 * 1) + 170;
      VKey.Construct.Keys.Shape[vi].Position.Y := 420;
    end
    else if vi in [48, 49, 50] then
    begin
      VKey.Construct.Keys.Shape[vi].Width := 50;
      VKey.Construct.Keys.Shape[vi].Height := 50;
      if vi = 48 then
        VKey.Construct.Keys.Shape[vi].Position.X := (50 * 8) + 170
      else if vi = 49 then
        VKey.Construct.Keys.Shape[vi].Position.X := (50 * 9) + 170
      else
        VKey.Construct.Keys.Shape[vi].Position.X := (50 * 11) + 150;
      VKey.Construct.Keys.Shape[vi].Position.Y := 420;
    end
    else if vi in [0, 12, 24, 36] then
    begin
      VKey.Construct.Keys.Shape[vi].Width := 120;
      VKey.Construct.Keys.Shape[vi].Height := 50;
      VKey.Construct.Keys.Shape[vi].Position.X := 50;
      if vi > 28 then
        VKey.Construct.Keys.Shape[vi].Position.Y := 370
      else if vi > 18 then
        VKey.Construct.Keys.Shape[vi].Position.Y := 320
      else if vi > 10 then
        VKey.Construct.Keys.Shape[vi].Position.Y := 270
      else
        VKey.Construct.Keys.Shape[vi].Position.Y := 220;
    end
    else
    begin
      VKey.Construct.Keys.Shape[vi].Width := 50;
      VKey.Construct.Keys.Shape[vi].Height := 50;
      if (vi = 13) or (vi = 25) or (vi = 37) then
        vfi := 0;
      VKey.Construct.Keys.Shape[vi].Position.X := (50 * vfi) + 170;
      if vi > 36 then
        VKey.Construct.Keys.Shape[vi].Position.Y := 370
      else if vi > 23 then
        VKey.Construct.Keys.Shape[vi].Position.Y := 320
      else if vi > 11 then
        VKey.Construct.Keys.Shape[vi].Position.Y := 270
      else
        VKey.Construct.Keys.Shape[vi].Position.Y := 220;
      inc(vfi, 1);
    end;
    VKey.Construct.Keys.Shape[vi].Stroke.Thickness := 4;
    VKey.Construct.Keys.Shape[vi].Stroke.Color := TAlphaColorRec.Black;
    VKey.Construct.Keys.Shape[vi].Fill.Color := StringToAlphaColor('#FF010709');
    VKey.Construct.Keys.Shape[vi].OnClick := VKey.Mouse.Image.OnMouseClick;
    VKey.Construct.Keys.Shape[vi].OnMouseEnter := VKey.Mouse.Image.OnMouseEnter;
    VKey.Construct.Keys.Shape[vi].OnMouseLeave := VKey.Mouse.Image.OnMouseLeave;
    VKey.Construct.Keys.Shape[vi].Tag := vi;
    if vi <> 35 then
      VKey.Construct.Keys.Shape[vi].Visible := True
    else
      VKey.Construct.Keys.Shape[vi].Visible := False;

    VKey.Construct.Keys.Symbol[vi] := TText.Create(VKey.Construct.Keys.Shape[vi]);
    VKey.Construct.Keys.Symbol[vi].Name := 'Virtual_Keyboard_Key_Name_' + IntToStr(vi);
    VKey.Construct.Keys.Symbol[vi].Parent := VKey.Construct.Keys.Shape[vi];
    VKey.Construct.Keys.Symbol[vi].Align := TAlignLayout.Client;
    VKey.Construct.Keys.Symbol[vi].Color := TAlphaColorRec.White;
    VKey.Construct.Keys.Symbol[vi].Font.Family := 'Tahoma';
    VKey.Construct.Keys.Symbol[vi].Font.Size := 20;
    VKey.Construct.Keys.Symbol[vi].Font.Style := VKey.Construct.Keys.Symbol[vi].Font.Style + [TFontStyle.fsBold];
    VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys[vi];
    VKey.Construct.Keys.Symbol[vi].HorzTextAlign := TTextAlign.Center;
    VKey.Construct.Keys.Symbol[vi].VertTextAlign := TTextAlign.Center;
    VKey.Construct.Keys.Symbol[vi].OnClick := VKey.Mouse.Text.OnMouseClick;
    VKey.Construct.Keys.Symbol[vi].OnMouseEnter := VKey.Mouse.Text.OnMouseEnter;
    VKey.Construct.Keys.Symbol[vi].OnMouseLeave := VKey.Mouse.Text.OnMouseLeave;
    VKey.Construct.Keys.Symbol[vi].Tag := vi;
    VKey.Construct.Keys.Symbol[vi].Visible := True;
  end;

  VKey.Options.Symbol := False;
  VKey.Options.Capital := False;
  VKey.Options.Shift := False;

  VKey.Options.Drop_Num := -1;
  VKey.Options.Drop_Current := -1;

  VKey.Construct.Edit.Edit.SetFocus;

  Animation(True);
end;

procedure VK_Free;
var
  vi: Integer;
begin
  extrafe.prog.State := VKey.Options.Previus_State;
  VKey.Options.Drop_Num := -1;
  for vi := 20 downto 0 do
    if Assigned(VKey.Construct.Drop.Line_Back[vi]) then
      FreeAndNil(VKey.Construct.Drop.Line_Back[vi]);
  FreeAndNil(VKey.Construct.Blur);
  FreeAndNil(VKey.Construct.Back);
end;

procedure Set_Capital(vActive: Boolean);
var
  vi: Integer;
begin
  if vActive then
  begin
    for vi := 0 to 50 do
    begin
      if vi in [0 .. 12, 23, 24, 34, 35, 36, 44 .. 50] then
      else
        VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys_Capital[vi];
      VKey.Construct.Keys.Symbol[12].TextSettings.FontColor := TAlphaColorRec.Red;
    end;
  end
  else
  begin
    for vi := 0 to 50 do
      VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys[vi];
    VKey.Construct.Keys.Symbol[12].TextSettings.FontColor := TAlphaColorRec.White;
  end;
end;

procedure Set_Symbols(vActive: Boolean);
var
  vi: Integer;
begin
  if vActive then
  begin
    for vi := 0 to 50 do
      if vi in [0, 11, 12, 23, 24, 35, 36, 47 .. 50] then
      else
        VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys_Symbols[vi];
    VKey.Construct.Keys.Symbol[36].TextSettings.FontColor := TAlphaColorRec.Red;
    VKey.Construct.Keys.Symbol[12].TextSettings.FontColor := TAlphaColorRec.Gray;
    VKey.Construct.Keys.Symbol[24].TextSettings.FontColor := TAlphaColorRec.Gray;
  end
  else
  begin
    if VKey.Options.Capital then
    begin
      for vi := 0 to 50 do
        VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys[vi];
      Set_Capital(VKey.Options.Capital);
      VKey.Construct.Keys.Symbol[24].TextSettings.FontColor := TAlphaColorRec.White;
      VKey.Construct.Keys.Symbol[36].TextSettings.FontColor := TAlphaColorRec.White;
    end
    else
    begin
      for vi := 0 to 50 do
        VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys[vi];
      VKey.Construct.Keys.Symbol[12].TextSettings.FontColor := TAlphaColorRec.White;
      VKey.Construct.Keys.Symbol[24].TextSettings.FontColor := TAlphaColorRec.White;
      VKey.Construct.Keys.Symbol[36].TextSettings.FontColor := TAlphaColorRec.White;
    end;
  end;
end;

procedure Set_Shift(vActive: Boolean);
var
  vi: Integer;
begin
  if vActive then
  begin
    for vi := 0 to 50 do
      if vi in [0, 11, 12, 23, 24, 34, 35, 36, 44 .. 50] then
      else
        VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys_Shift[vi];
    VKey.Construct.Keys.Symbol[12].TextSettings.FontColor := TAlphaColorRec.Gray;
    VKey.Construct.Keys.Symbol[24].TextSettings.FontColor := TAlphaColorRec.Red;
    VKey.Construct.Keys.Symbol[36].TextSettings.FontColor := TAlphaColorRec.Gray;
  end
  else
  begin
    for vi := 0 to 50 do
      VKey.Construct.Keys.Symbol[vi].Text := cVirtual_Keyboard_Keys[vi];
    VKey.Construct.Keys.Symbol[12].TextSettings.FontColor := TAlphaColorRec.White;
    VKey.Construct.Keys.Symbol[24].TextSettings.FontColor := TAlphaColorRec.White;
    VKey.Construct.Keys.Symbol[36].TextSettings.FontColor := TAlphaColorRec.White;
  end;
end;

procedure Clear_Drop;
var
  vi: Integer;
begin
  for vi := 20 downto 0 do
  begin
    if Assigned(uVirtual_Keyboard.VKey.Construct.Drop.Line_Back[vi]) then
      FreeAndNil(uVirtual_Keyboard.VKey.Construct.Drop.Line_Back[vi]);
  end;
  uVirtual_Keyboard.VKey.Construct.Drop.Back.Height := 0;
  uVirtual_Keyboard.VKey.Options.Drop_Num := -1;
  uVirtual_Keyboard.VKey.Options.Drop_Current := -1;
end;

procedure Drop(vLine: Integer; vString: String; vImagePath: String);
begin
  VKey.Construct.Drop.Line_Back[vLine] := TRectangle.Create(VKey.Construct.Drop.Box);
  VKey.Construct.Drop.Line_Back[vLine].Name := 'Virual_Keyboard_Drop_Line_' + vLine.ToString;
  VKey.Construct.Drop.Line_Back[vLine].Parent := VKey.Construct.Drop.Box;
  VKey.Construct.Drop.Line_Back[vLine].SetBounds(4, (vLine * 20) + 4, VKey.Construct.Drop.Box.Width - 8, 28);
  VKey.Construct.Drop.Line_Back[vLine].Fill.Color := TAlphaColorRec.Black;
  VKey.Construct.Drop.Line_Back[vLine].OnClick := VKey.Mouse.Rectangle.OnMouseClick;
  VKey.Construct.Drop.Line_Back[vLine].OnMouseEnter := VKey.Mouse.Rectangle.OnMouseEnter;
  VKey.Construct.Drop.Line_Back[vLine].OnMouseLeave := VKey.Mouse.Rectangle.OnMouseLeave;
  VKey.Construct.Drop.Line_Back[vLine].Tag := vLine;
  VKey.Construct.Drop.Line_Back[vLine].Visible := True;

  VKey.Construct.Drop.Icon[vLine] := TImage.Create(VKey.Construct.Drop.Line_Back[vLine]);
  VKey.Construct.Drop.Icon[vLine].Name := 'Virtual_Keyboard_Drop_Icon_' + vLine.ToString;
  VKey.Construct.Drop.Icon[vLine].Parent := VKey.Construct.Drop.Line_Back[vLine];
  VKey.Construct.Drop.Icon[vLine].SetBounds(2, 1, 18, 18);
  if vImagePath <> '' then
    VKey.Construct.Drop.Icon[vLine].Bitmap.LoadFromFile(vImagePath);
  VKey.Construct.Drop.Icon[vLine].OnClick := VKey.Mouse.Image.OnMouseClick;
  VKey.Construct.Drop.Icon[vLine].OnMouseEnter := VKey.Mouse.Image.OnMouseEnter;
  VKey.Construct.Drop.Icon[vLine].OnMouseLeave := VKey.Mouse.Image.OnMouseLeave;
  VKey.Construct.Drop.Icon[vLine].Tag := vLine;
  VKey.Construct.Drop.Icon[vLine].Visible := True;

  VKey.Construct.Drop.Text[vLine] := TText.Create(VKey.Construct.Drop.Line_Back[vLine]);
  VKey.Construct.Drop.Text[vLine].Name := 'Virtual_Keyboard_Drop_Text_' + vLine.ToString;
  VKey.Construct.Drop.Text[vLine].Parent := VKey.Construct.Drop.Line_Back[vLine];
  VKey.Construct.Drop.Text[vLine].SetBounds(22, 0, VKey.Construct.Drop.Line_Back[vLine].Width - 22, 18);
  VKey.Construct.Drop.Text[vLine].Font.Size := 16;
  VKey.Construct.Drop.Text[vLine].Color := TAlphaColorRec.White;
  VKey.Construct.Drop.Text[vLine].TextSettings.HorzAlign := TTextAlign.Leading;
  VKey.Construct.Drop.Text[vLine].Text := vString;
  VKey.Construct.Drop.Text[vLine].Tag := vLine;
  VKey.Construct.Drop.Text[vLine].OnClick := VKey.Mouse.Text.OnMouseClick;
  VKey.Construct.Drop.Text[vLine].OnMouseEnter := VKey.Mouse.Text.OnMouseEnter;
  VKey.Construct.Drop.Text[vLine].OnMouseLeave := VKey.Mouse.Text.OnMouseLeave;
  VKey.Construct.Drop.Text[vLine].Visible := True;

  if vLine > 5 then
    VKey.Construct.Drop.Back.Height := 130
  else
    VKey.Construct.Drop.Back.Height := (vLine + 1) * 21.66;
  VKey.Options.Drop_Num := vLine;
end;

/// /////////////////////////////////////////////////////////////////////////////
Procedure Backspace;
var
  vStr: String;
begin
  if VKey.Construct.Edit.Edit.Text <> '' then
  begin
    vStr := VKey.Construct.Edit.Edit.Text;
    Delete(vStr, Length(vStr), 1);
    VKey.Construct.Edit.Edit.Text := vStr;
    VKey.Construct.Edit.Edit.SelStart := Length(VKey.Construct.Edit.Edit.Text);
  end
end;

procedure Key(vActionKey: String);
var
  vi: Integer;
  vEditString: String;
  vScrollByNum: Single;
  vFoundDrop: Boolean;

  function Key_To_Num(vKey_Num: String): Integer;
  begin
    if vKey_Num = '' then
      Result := 0
    else if vKey_Num = '1' then
      Result := 1
    else if vKey_Num = '2' then
      Result := 2
    else if vKey_Num = '3' then
      Result := 3
    else if vKey_Num = '4' then
      Result := 4
    else if vKey_Num = '5' then
      Result := 5
    else if vKey_Num = '6' then
      Result := 6
    else if vKey_Num = '7' then
      Result := 7
    else if vKey_Num = '8' then
      Result := 8
    else if vKey_Num = '9' then
      Result := 9
    else if vKey_Num = '0' then
      Result := 10
    else if vKey_Num = 'BACKSPACE' then
      Result := 11
    else if vKey_Num = 'CAPS LOCK' then
      Result := 12
    else if vKey_Num = 'Q' then
      Result := 13
    else if vKey_Num = 'W' then
      Result := 14
    else if vKey_Num = 'E' then
      Result := 15
    else if vKey_Num = 'R' then
      Result := 16
    else if vKey_Num = 'T' then
      Result := 17
    else if vKey_Num = 'Y' then
      Result := 18
    else if vKey_Num = 'U' then
      Result := 19
    else if vKey_Num = 'I' then
      Result := 20
    else if vKey_Num = 'O' then
      Result := 21
    else if vKey_Num = 'P' then
      Result := 22
    else if vKey_Num = 'ENTER' then
      Result := 23
    else if vKey_Num = 'SHIFT' then
      Result := 24
    else if vKey_Num = 'A' then
      Result := 25
    else if vKey_Num = 'S' then
      Result := 26
    else if vKey_Num = 'D' then
      Result := 27
    else if vKey_Num = 'F' then
      Result := 28
    else if vKey_Num = 'G' then
      Result := 29
    else if vKey_Num = 'H' then
      Result := 30
    else if vKey_Num = 'J' then
      Result := 31
    else if vKey_Num = 'K' then
      Result := 32
    else if vKey_Num = 'L' then
      Result := 33
    else if vKey_Num = ';' then
      Result := 34
    else if vKey_Num = '' then
      Result := 35
    else if vKey_Num = 'CTRL' then
      Result := 36
    else if vKey_Num = 'Z' then
      Result := 37
    else if vKey_Num = 'X' then
      Result := 38
    else if vKey_Num = 'C' then
      Result := 39
    else if vKey_Num = 'V' then
      Result := 40
    else if vKey_Num = 'B' then
      Result := 41
    else if vKey_Num = 'N' then
      Result := 42
    else if vKey_Num = 'M' then
      Result := 43
    else if vKey_Num = '.' then
      Result := 44
    else if vKey_Num = '/' then
      Result := 45
    else if vKey_Num = 'NUM2' then
      Result := 46
    else if vKey_Num = 'SPACE' then
      Result := 47
    else if vKey_Num = 'LEFT' then
      Result := 48
    else if vKey_Num = 'RIGHT' then
      Result := 49
    else if vKey_Num = 'ESC' then
      Result := 50
    else if vKey_Num = 'UP' then
      Result := 51
    else if vKey_Num = 'DOWN' then
      Result := 52
    else
      Result := -1;
  end;

begin
  if UpperCase(vActionKey) = 'ESC' then
  begin
    if VKey.Options.vType = 'Input' then
      Animation(False)
  end
  else if UpperCase(vActionKey) = 'BACKSPACE' then
    Backspace
  else if UpperCase(vActionKey) = 'ENTER' then
    Press('ENTER')
  else if UpperCase(vActionKey) = 'CAPS LOCK' then
  begin
    if VKey.Construct.Keys.Symbol[Key_To_Num(UpperCase(vActionKey))].Color <> TAlphaColorRec.Grey then
    begin
      VKey.Options.Capital := not VKey.Options.Capital;
      Set_Capital(VKey.Options.Capital);
    end;
  end
  else if UpperCase(vActionKey) = 'SHIFT' then
  begin
    if (VKey.Options.Symbol = False) and (VKey.Options.Capital = False) then
    begin
      VKey.Options.Shift := not VKey.Options.Shift;
      Set_Shift(VKey.Options.Shift);
    end;
  end
  else if UpperCase(vActionKey) = 'CTRL' then
  begin
    if VKey.Construct.Keys.Symbol[Key_To_Num(UpperCase(vActionKey))].Color <> TAlphaColorRec.Gray then
    begin
      VKey.Options.Symbol := not VKey.Options.Symbol;
      Set_Symbols(VKey.Options.Symbol);
    end;
  end
  else if UpperCase(vActionKey) = 'SPACE' then
  begin
    VKey.Construct.Edit.Edit.Text := VKey.Construct.Edit.Edit.Text + ' ';
    VKey.Construct.Edit.Edit.SelStart := Length(VKey.Construct.Edit.Edit.Text);
  end
  else if UpperCase(vActionKey) = 'UP' then
  begin
    if VKey.Options.Drop_Current > -1 then
    begin
      if VKey.Options.Drop_Num > 5 then
        vScrollByNum := ((VKey.Options.Drop_Num * 21.66) - 130) / VKey.Options.Drop_Num + 1;
      for vi := 0 to 50 do
        VKey.Construct.Keys.Shape[vi].Fill.Color := TAlphaColorRec.Black;
      VKey.Construct.Drop.Line_Back[VKey.Options.Drop_Current].Fill.Color := TAlphaColorRec.Black;
      dec(VKey.Options.Drop_Current, 1);
      if VKey.Options.Drop_Current <> -1 then
        VKey.Construct.Drop.Line_Back[VKey.Options.Drop_Current].Fill.Color := TAlphaColorRec.Deepskyblue;
      if VKey.Options.Drop_Current < VKey.Options.Drop_Num + 1 then
        if VKey.Options.Drop_Current = 0 then
          VKey.Construct.Drop.Box.ScrollBy(0, 1000)
        else
          VKey.Construct.Drop.Box.ScrollBy(0, vScrollByNum);
      Press(UpperCase(vActionKey));
    end;
  end
  else if UpperCase(vActionKey) = 'DOWN' then
  begin
    if VKey.Options.Drop_Current < 20 then
    begin
      for vi := 0 to 50 do
        VKey.Construct.Keys.Shape[vi].Fill.Color := TAlphaColorRec.Black;
      if VKey.Options.Drop_Current < VKey.Options.Drop_Num then
      begin
        if VKey.Options.Drop_Num > 5 then
          vScrollByNum := ((VKey.Options.Drop_Num * 21.66) - 130) / VKey.Options.Drop_Num + 1;
        if VKey.Options.Drop_Current <> -1 then
          VKey.Construct.Drop.Line_Back[VKey.Options.Drop_Current].Fill.Color := TAlphaColorRec.Black;
        inc(VKey.Options.Drop_Current, 1);
        if VKey.Options.Drop_Current > 20 then
          VKey.Options.Drop_Current := 20;
        VKey.Construct.Drop.Line_Back[VKey.Options.Drop_Current].Fill.Color := TAlphaColorRec.Deepskyblue;
        if VKey.Options.Drop_Current > 1 then
          if VKey.Options.Drop_Num = VKey.Options.Drop_Current then
            VKey.Construct.Drop.Box.ScrollBy(0, -1000)
          else
            VKey.Construct.Drop.Box.ScrollBy(0, -vScrollByNum);
        Press(UpperCase(vActionKey));
      end;
    end;
  end
  else
  begin
    if Key_To_Num(vActionKey) <> -1 then
    begin
      VKey.Construct.Edit.Edit.Text := VKey.Construct.Edit.Edit.Text + VKey.Construct.Keys.Symbol[Key_To_Num(vActionKey)].Text;
      VKey.Construct.Edit.Edit.SelStart := Length(VKey.Construct.Edit.Edit.Text);
    end;
  end;
  if (UpperCase(vActionKey) <> 'UP') and (UpperCase(vActionKey) <> 'DOWN') then
    Press(UpperCase(vActionKey));
end;

procedure Press(vActionKey: String);
begin
  if ContainsText(VKey.Options.Previus_State, 'loading') then
  else if ContainsText(VKey.Options.Previus_State, 'main') then
  else if ContainsText(VKey.Options.Previus_State, 'addon') then
  else if ContainsText(VKey.Options.Previus_State, 'emu') then
    uEmu_Actions.Key(vActionKey);
end;

{ TVIRTUAL_KEYBOARD_IMAGE }

procedure TVIRTUAL_KEYBOARD_IMAGE.OnMouseClick(Sender: TObject);
begin

end;

procedure TVIRTUAL_KEYBOARD_IMAGE.OnMouseEnter(Sender: TObject);
begin
  if TImage(Sender).Name = 'Virtual_Keyboard_Drop_Icon_' + TImage(Sender).Tag.ToString then
    VKey.Construct.Drop.Line_Back[TImage(Sender).Tag].Fill.Color := TAlphaColorRec.Deepskyblue;
end;

procedure TVIRTUAL_KEYBOARD_IMAGE.OnMouseLeave(Sender: TObject);
begin
  if TImage(Sender).Name = 'Virtual_Keyboard_Drop_Icon_' + TImage(Sender).Tag.ToString then
    VKey.Construct.Drop.Line_Back[TImage(Sender).Tag].Fill.Color := TAlphaColorRec.Black;
end;

{ TVIRTUAL_KEYBOARD_TEXT }

procedure TVIRTUAL_KEYBOARD_TEXT.OnMouseClick(Sender: TObject);
var
  vString: String;
begin
  vString := VKey.Construct.Edit.Edit.Text;
  if TText(Sender).Name = 'Virtual_Keyboard_Drop_Text_' + TText(Sender).Tag.ToString then
  begin
    if TText(Sender).Text <> '...' then
    begin
      VKey.Construct.Edit.Edit.Text := TText(Sender).Text;
      VKey.Construct.Edit.Edit.SelStart := Length(VKey.Construct.Edit.Edit.Text);
      Press('Drop');
    end;
  end
  else
  begin
    if TText(Sender).Text = 'Caps Lock' then
    begin
      if TText(Sender).Color <> TAlphaColorRec.Grey then
      begin
        VKey.Options.Capital := not VKey.Options.Capital;
        Set_Capital(VKey.Options.Capital)
      end;
    end
    else if TText(Sender).Text = 'Shift' then
    begin
      if (VKey.Options.Symbol = False) and (VKey.Options.Capital = False) then
      begin
        VKey.Options.Shift := not VKey.Options.Shift;
        Set_Shift(VKey.Options.Shift);
      end;
    end
    else if TText(Sender).Text = 'Symbols' then
    begin
      if TText(Sender).Color <> TAlphaColorRec.Gray then
      begin
        VKey.Options.Symbol := not VKey.Options.Symbol;
        Set_Symbols(VKey.Options.Symbol);
      end;
    end
    else if TText(Sender).Text = 'Back' then
    begin
      if vString <> '' then
      begin
        Delete(vString, Length(vString), 1);
        VKey.Construct.Edit.Edit.Text := vString;
        VKey.Construct.Edit.Edit.SelStart := Length(VKey.Construct.Edit.Edit.Text);
        Press('Back');
      end;
    end
    else if TText(Sender).Text = 'Space' then
    begin
      VKey.Construct.Edit.Edit.Text := vString + ' ';
      Press('Space');
    end
    else if TText(Sender).Text = 'Exit' then
      Press('Esc')
    else if TText(Sender).Text = 'Enter' then
      Press('Enter')
    else
    begin
      VKey.Construct.Edit.Edit.Text := vString + VKey.Construct.Keys.Symbol[TImage(Sender).Tag].Text;
      Press(TText(Sender).Text);
      if VKey.Options.Shift then
      begin
        VKey.Options.Shift := not VKey.Options.Shift;
        Set_Shift(VKey.Options.Shift);
      end;
    end;
    VKey.Construct.Edit.Edit.SelStart := Length(VKey.Construct.Edit.Edit.Text);
  end;
end;

procedure TVIRTUAL_KEYBOARD_TEXT.OnMouseEnter(Sender: TObject);
var
  vi: Integer;
begin
  TText(Sender).Cursor := crHandPoint;
  if TText(Sender).Name = 'Virtual_Keyboard_Drop_Text_' + TText(Sender).Tag.ToString then
  begin
    if VKey.Options.Drop_Current <> TText(Sender).Tag then
    begin
      for vi := 0 to 20 do
        if Assigned(VKey.Construct.Drop.Line_Back[vi]) then
          VKey.Construct.Drop.Line_Back[vi].Fill.Color := TAlphaColorRec.Black;
    end;
    VKey.Construct.Drop.Line_Back[TText(Sender).Tag].Fill.Color := TAlphaColorRec.Deepskyblue;
    VKey.Options.Drop_Current := TText(Sender).Tag;
  end
  else
    VKey.Construct.Keys.Shape[TText(Sender).Tag].Fill.Color := TAlphaColorRec.Deepskyblue;
end;

procedure TVIRTUAL_KEYBOARD_TEXT.OnMouseLeave(Sender: TObject);
begin
  if TText(Sender).Name = 'Virtual_Keyboard_Drop_Text_' + TText(Sender).Tag.ToString then
  begin
    VKey.Construct.Drop.Line_Back[TText(Sender).Tag].Fill.Color := TAlphaColorRec.Black;
    VKey.Options.Drop_Current := -1;
  end
  else
    VKey.Construct.Keys.Shape[TText(Sender).Tag].Fill.Color := StringToAlphaColor('#FF010709');
end;

{ TVIRTUAL_KEYBOARD_RECTANGLE }

procedure TVIRTUAL_KEYBOARD_RECTANGLE.OnMouseClick(Sender: TObject);
begin

end;

procedure TVIRTUAL_KEYBOARD_RECTANGLE.OnMouseEnter(Sender: TObject);
begin
  if TRectangle(Sender).Name = 'Virual_Keyboard_Drop_Line_' + TRectangle(Sender).Tag.ToString then
    TRectangle(Sender).Fill.Color := TAlphaColorRec.Deepskyblue;
end;

procedure TVIRTUAL_KEYBOARD_RECTANGLE.OnMouseLeave(Sender: TObject);
begin
  if TRectangle(Sender).Name = 'Virual_Keyboard_Drop_Line_' + TRectangle(Sender).Tag.ToString then
    TRectangle(Sender).Fill.Color := TAlphaColorRec.Black;
end;

{ TANIMATION }

procedure TANIMATION.OnFinish(Sender: TObject);
begin
  if TFloatAnimation(Sender).Name = 'Virtual_Keyboard_Animation' then
  begin
    if VKey.Construct.Back.Position.Y = extrafe.res.Height + 1 then
    begin
      VKey.Construct.Blur.Enabled := False;
      VK_Free;
      VKey.Enter_Pressed := False;
    end;
  end;
end;

initialization

VKey.Mouse.Image := TVIRTUAL_KEYBOARD_IMAGE.Create;
VKey.Mouse.Text := TVIRTUAL_KEYBOARD_TEXT.Create;
VKey.Mouse.Rectangle := TVIRTUAL_KEYBOARD_RECTANGLE.Create;
VKey.Animation := TANIMATION.Create;

finalization

VKey.Mouse.Image.Free;
VKey.Mouse.Text.Free;
VKey.Mouse.Rectangle.Free;
VKey.Animation.Free;

end.
