unit uDB_Check;

interface

uses
  System.Classes;

{ Check if Tables exists and create the missing one }
procedure Local_tables;

{ Check if Columns exits or have someone to delete }
procedure Local_Columns;
procedure Users;
procedure Users_Statistics;
procedure Settings;
procedure Options;
procedure Addons;
procedure Addon_Time;
procedure Addon_Time_Time;
procedure Addon_Calendar;
procedure Addon_Weather;
procedure Addon_Weather_OWM;
procedure Addon_Weather_Yahoo;
procedure Addon_Soundplayer;
procedure Addon_Soundplayer_Playlists;
procedure Addon_AzPlay;
procedure Emulators;
procedure Arcade;
procedure Arcade_Mame;
procedure Arcade_Media;
procedure Computers;
procedure Consoles;
procedure Handhelds;
procedure Pinballs;

implementation

uses
  uDB;

{ Check if Tables exists and create the missing one }
procedure Local_tables;
begin
  { 22 Tables }
  // Users ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS users ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Username" Text,	"Password" Text,	"Name" Text, "Surname" Text, "IP" Text, "Unique_ID" Integer, '
    + '"Registered" Text, "Gender" Boolean, "Avatar" Text, "Last_Visit" Text, "Last_Visit_Online" Text, "Email" Text, "Country" Text, "Active_Online" Boolean);';
  ExtraFE_Query_Local.ExecSQL;

  // Users_Statistics ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'CREATE TABLE IF NOT EXISTS users_statistics ("User_ID" Integer);';
  ExtraFE_Query_Local.ExecSQL;

  // Settings ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS settings ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Theme_Path" Text,	"Theme_Num" Integer,	"Theme_Name" Text, "Resolution_Width" Integer, '
    + '"Resolution_Height" Integer, "Name" Text, "Path_Lib" Text, "Path_History" Text, "Path_Fonts" Text, "Path_Database" Text, "Path" Text, "Local_Data" Boolean, "Foulscreen" Boolean Default True);';
  ExtraFE_Query_Local.ExecSQL;

  // Options ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS options ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Virtual_Keyboard" Boolean);';
  ExtraFE_Query_Local.ExecSQL;

  // Map Keyboard
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS map_keyboard ("Map_Key_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "User_ID" Integer, "Main_Up" Text, "Main_Down" Text, "Main_Left" Text, '
    + '"Main_Right" Text, "Main_Action" Text, "Main_Escape" Text, "Main_Config" Text, "Emu_Up" Text, "Emu_Down" Text, "Emu_Left" Text, "Emu_Right" Text, "Emu_Action" Text, "Emu_Escape" Text, '
    + '"Emu_Fav" Text, "Emu_AddFav" Text, "Emu_Filters" Text, "Emu_Lists" Text, "Emu_Search" Text, "Emu_Config" Text, "Emu_Screensaver" Text);';
  ExtraFE_Query_Local.ExecSQL;

  // Map Mouse
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS map_mouse ("Map_Mouse_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "User_ID" Integer, "Name" Text, "Buttons_Num" Text, "Mouse_X_Left" Text, '
    + '"Mouse_X_Right" Text, "Mouse_Y_Top" Text, "Mouse_Y_Bottom" Text, "Button_1" Text, "Button_2" Text, "Button_3" Text, "Button_4" Text, "Button_5" Text, "Button_6" Text, "Dpi" Text);';
  ExtraFE_Query_Local.ExecSQL;

  // Map Joystick MMSystem
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS map_joystick_mmsystem ("Map_Joy_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "User_ID" Integer, "Up" Text, "Down" Text, "Left" Text, "Right" Text, "Button_1" Text, '
    + '"button_2" Text, "button_3" Text, "button_4" Text, "button_5" Text, "button_6" Text, "button_7" Text, "button_8" Text, "button_9" Text, "button_10" Text, "button_11" Text, "button_12" Text, '
    + '"button_13" Text, "button_14" Text, "button_15" Text, "button_16" Text, "emu_up" Text, "emu_down" Text, "emu_left" Text, "emu_right" Text, "emu_button_1" Text, "emu_button_2" Text, '
    + '"emu_button_3" Text, "emu_button_4" Text, "emu_button_5" Text, "emu_button_6" Text, "emu_button_7" Text, "emu_button_8" Text, "emu_button_9" Text, "emu_button_10" Text, "emu_button_11" Text, '
    + '"emu_button_12" Text, "emu_button_13" Text, "emu_button_14" Text, "emu_button_15" Text, "emu_button_16" Text, "button_num" Text, "manufacturer_name" Text, "product_name" Text, "pov" Text, '
    + '"forceback" Text, "regkey" Text, "szoem" Text, "position" Text, "name" Text);';
  ExtraFE_Query_Local.ExecSQL;

  // Addons ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addons ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Active" BOOLENAN DEFAULT True,	"Count" Integer DEFAULT 4,	"Time" Boolean DEFAULT True, '
    + '"Calendar" Boolean DEFAULT True, "Weather" Boolean DEFAULT False, "Soundplayer" Boolean DEFAULT False, "AzPlay" Boolean DEFAULT False);';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Time ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_time ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "First_Pop" Boolean DEFAULT True,	"Menu_Position" Integer DEFAULT 0,	"Path_Clocks" Text, '
    + ' "Path_Images" Text, "Path_Sounds" Text);';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Time_Time ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_time_time ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Clock_Type" Text DEFAULT "digital", "Analog_Width" Integer DEFAULT 400,'
    + ' "Analog_Height" Integer DEFAULT 400, "Analog_X" Integer DEFAULT 400, "Analog_Y" Integer DEFAULT 50, "Analog_Theme" Text DEFAULT "default", "Analog_Color" Text DEFAULT "$FFFF1493", '
    + ' "Analog_Font" Text DEFAULT Arial, "Analog_Indicators" Boolean DEFAULT True, "Analog_Nums" Boolean DEFAULT True, "Analog_Tick" Boolean DEFAULT False, "Digital_Width" Integer DEFAULT 400, '
    + ' "Digital_Height" Integer DEFAULT 200, "Digital_X" Integer DEFAULT 400, "Digital_Y" Integer DEFAULT 100, "Digital_Color" Text DEFAULT "$FF483D8B", "Digital_Font" Text DEFAULT Arial, '
    + ' "Digital_Font_Color" Text DEFAULT "$FFFF1493", "Digital_Separator" Text DEFAULT ":", "Digital_Separator_Color" Text DEFAULT "$FFFF1493");';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Calendar ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_calendar ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "First_Pop" Boolean DEFAULT True, "Menu_Position" Integer DEFAULT 1);';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Weather ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_weather ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "First_Pop" Boolean DEFAULT True, "Memu_Position" Integer, '
    + ' "Old_Backup" Boolean DEFAULT False, "Provider_Count" Integer DEFAULT 1, "Provider" Text, "Path_Icons" Text, "Path_Images" Text, "Path_Sounds" Text, "Path_Temp" Text, '
    + ' "Yahoo_Iconset_Count" Integer DEFAULT 3, "Yahoo_Iconset" Text DEFAULT "default", "Yahoo_Iconset_Selected" Integer DEFAULT "0", "Yahoo_Metric" Text DEFAULT "imperial", "Yahoo_Degree" Text DEFAULT "celcius", "OWM_Iconset_Count" Integer DEFAULT 1, '
    + ' "OWM_Iconset" Text DEFAULT "default", "OWM_Iconset_Selected" Integer DEFAULT "0", "OWM_Metric" Text DEFAULT "imperial", "OWM_Degree" Text DEFAULT "celcius", "OWM_API" Text, "OWM_Lang" Text DEFAULT "english");';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Weather_OWM  ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_weather_owm ("User_ID" Integer , "Town_Num" Integer, "Town_WOEID" Text,	"Town_Name" Text );';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Weather_Yahoo ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_weather_yahoo ("User_ID" Integer , "Town_Num" Integer, "Town_WOEID" Text,	"Town_Name" Text );';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Soundplayer ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_soundplayer ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "First_Pop" Boolean DEFAULT True, ' +
    ' "Menu_Position" Integer, "Path_Images" Text, "Path_Sounds" Text, "Path_Playlists" Text, "Volume" Integer DEFAULT 80, "Last_Playing_Song_Num" Integer DEFAULT "-1", '
    + ' "Playlist_Count" Integer DEFAULT "-1", "Last_Playlist" Integer DEFAULT "-1", "Total_Play" Integer DEFAULT "-1", "Total_Time" Integer DEFAULT "0");';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_Soundplayer_Playlists
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_soundplayer_playlists ("User_ID" Integer, "Song_Name" Text,	"Song_Audio_Type" Text,	"Song_Path" Text,  "Song_Position" Integer, "Song_Time" Integer, "Song_Last" Boolean, "Playlist_Name" Text, Playlist_Num Integer);';
  ExtraFE_Query_Local.ExecSQL;

  // Addon_AzPlay ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS addon_azplay ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "First_Pop" Boolean DEFAULT True, "Menu_Position" Integer, "Count" Integer DEFAULT 0, '
    + ' "Active" Integer DEFAULT 0, "AzHung" Boolean DEFAULT True);';
  ExtraFE_Query_Local.ExecSQL;

  // Emulators  ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS emulators ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Count" Integer DEFAULT "-1", "Active_Unique" Real DEFAULT "-1", '
    + ' "Path" Text,	"Arcade" Boolean DEFAULT False, "Computers" Boolean DEFAULT False, "Consoles" Boolean DEFAULT False, "Handhelds" Boolean DEFAULT False,' +
    ' "Pinballs" Boolean DEFAULT False );';
  ExtraFE_Query_Local.ExecSQL;

  // Arcade ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS arcade ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Active" Boolean DEFAULT "True","Count" Integer DEFAULT "-1", "Position" Integer DEFAULT "0", "Name" Text DEFAULT "arcade", '
    + ' "Path_Images" Text,  "Path_Videos" Text, "Mame" Boolean DEFAULT False,	"FBA" Boolean DEFAULT False, "Zinc" Boolean DEFAULT False, "DAPHNE" Boolean DEFAULT False, "RAINE" Boolean DEFAULT False, '
    + ' "SuperModel" Boolean DEFAULT False, "DEMUL" Boolean DEFAULT False, "WinKawaks" Boolean DEFAULT False, "Model2" Boolean DEFAULT False );';
  ExtraFE_Query_Local.ExecSQL;

  // Arcade_Mame ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS arcade_mame ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Installed" Boolean DEFAULT False,	"Emu_Position" Integer DEFAULT "-1", '
    + ' "Emu_Active" Boolean DEFAULT False, "Emu_Unique" Real DEFAULT "0", "View_Mode" Text DEFAULT "video" ,"ExtraFE_Mame_Views" Text, "ExtraFE_Mame_Path" Text, '
    + ' "ExtraFE_Mame_Images" Text, "ExtraFE_Mame_Sounds" Text, "Mame_Name" Text, "Mame_Path" Text, "Mame_Ini" Text, "Mame_Version" Text);';
  ExtraFE_Query_Local.ExecSQL;

  // Arcade_Media ->
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS arcade_media ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Artworks" Text, "Cabinets" Text,	"Control_Panels" Text, "Covers" Text, "Flyers" Text, '
    + ' "Fanart" Text, "Game_Over" Text, "Icons" Text, "Manuals" Text, "Marqueess" Text, "PCBs" Text, "Snapshots" Text, "Titles" Text, "Artwork_Preview" Text, "Bosses" Text, "Ends" Text, "How_To" Text, '
    + ' "Logos" Text, "Scores" Text, "Selects" Text, "Stamps" Text, "Versus" Text, "Warnings" Text, "Soundtracks" Text, "Support_Files" Text, "Videos" Text);';
  ExtraFE_Query_Local.ExecSQL;

  // Computers
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS computers ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT,"Active" Boolean DEFAULT "True", "Count" Integer DEFAULT "-1", "Position" Integer DEFAULT "1", "Name" Text DEFAULT "computers", '
    + ' "Path_Images" Text,	"Acorn_Archimedes" Boolean DEFAULT False,	"AMIGA" Boolean DEFAULT False, "Amstrad" Boolean DEFAULT False, "Atari_8Bit" Boolean DEFAULT False, "ATARI_ST" Boolean DEFAULT False, '
    + ' "Commodore_64" Boolean DEFAULT False, "MsDOS" Boolean DEFAULT False, "Old_PC_Windows" Boolean DEFAULT False, "SCUMMVM" Boolean DEFAULT False, "Spectrum" Boolean DEFAULT False, "X68000" Boolean DEFAULT False );';
  ExtraFE_Query_Local.ExecSQL;

  // Consoles
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS consoles ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT,"Active" Boolean DEFAULT "True", "Count" Integer DEFAULT "-1", "Position" Integer DEFAULT "2", "Name" Text DEFAULT "consoles", '
    + ' "Path_Images" Text,	"3DO" Boolean DEFAULT False,	"AMIGA_CD32" Boolean DEFAULT False, "Atari_2600" Boolean DEFAULT False, "Atari_5200" Boolean DEFAULT False, "Atari_7800" Boolean DEFAULT False, '
    + ' "Atari_JAGUAR" Boolean DEFAULT False, "NEO_GEO" Boolean DEFAULT False, "NEO_GEO_CD" Boolean DEFAULT False, "NES" Boolean DEFAULT False, "SNES" Boolean DEFAULT False, "Nintendo_64" Boolean DEFAULT False, '
    + ' "GameCube" Boolean DEFAULT False, "WII" Boolean DEFAULT False, "WII_U" Boolean DEFAULT False, "Nintendo_SWITCH" Boolean DEFAULT False, "PC_Engine" Boolean DEFAULT False, "PC_Engine_CD" Boolean DEFAULT False, '
    + ' "PC_FX" Boolean DEFAULT False, "Playstation" Boolean DEFAULT False, "Playstation_2" Boolean DEFAULT False, "Playstation_3" Boolean DEFAULT False, "SG_1000" Boolean DEFAULT False, '
    + ' "Master_System" Boolean DEFAULT False, "Mega_Drive" Boolean DEFAULT False, "Mega_Drive_32X" Boolean DEFAULT False, "Mega_Drive_CD" Boolean DEFAULT False, "Saturn" Boolean DEFAULT False, '
    + ' "Dreamcast" Boolean DEFAULT False, "XBOX" Boolean DEFAULT False, "XBOX_ONE" Boolean DEFAULT False );';
  ExtraFE_Query_Local.ExecSQL;

  // Handhelds
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS handhelds ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT,"Active" Boolean DEFAULT "True", "Count" Integer DEFAULT "-1", "Position" Integer DEFAULT "3", "Name" Text DEFAULT "handhelds", '
    + ' "Path_Images" Text, "Atari_Lynx" Boolean DEFAULT False, "NEO_GEO_Pocket" Boolean DEFAULT False, "Gamegear" Boolean DEFAULT False, "Game_And_Watch" Boolean DEFAULT False, "Gameboy" Boolean DEFAULT False, '
    + ' "Gameboy_Color" Boolean DEFAULT False, "Gameboy_VirtualBoy" Boolean DEFAULT False, "Gameboy_Advance" Boolean DEFAULT False, "Nintendo_DS" Boolean DEFAULT False, "Nintendo_3DS" Boolean DEFAULT False, '
    + ' "PSP" Boolean DEFAULT False, "PSP_Vita" Boolean DEFAULT False, "Wonderswan" Boolean DEFAULT False);';
  ExtraFE_Query_Local.ExecSQL;

  // Pinballs
  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text :=
    'CREATE TABLE IF NOT EXISTS pinballs ("User_ID" Integer NOT NULL DEFAULT 0 PRIMARY KEY AUTOINCREMENT, "Active" Boolean DEFAULT "True", "Count" Integer DEFAULT "-1", "Position" Integer DEFAULT "4", "Name" Text DEFAULT "pinballs", '
    + ' "Path_Images" Text, "Visual_Pinball" Boolean DEFAULT False, "Future_Pinball" Boolean DEFAULT False);';
  ExtraFE_Query_Local.ExecSQL;
end;

{ Check if Columns exits or have someone to delete }
procedure Users;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("users");';
  ExtraFE_Query_Local.Open;
  ExtraFE_Query_Local.First;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Users_Statistics;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("users_statistcs");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Settings;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("settings");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Options;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("options");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addons;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addons");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Time;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_time");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Time_Time;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_time_time");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Calendar;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_calendar");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Weather;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_weather");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Weather_OWM;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_weather_owm");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Weather_Yahoo;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_weather_yahoo");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Soundplayer;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_soundplayer");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_Soundplayer_Playlists;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_soundplayer_playlists");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Addon_AzPlay;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("addon_azplay");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Emulators;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("emulators");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Arcade;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("arcade");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Arcade_Mame;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("arcade_mame");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Arcade_Media;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("arcade_media");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Computers;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("computers");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Consoles;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("consoles");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Handhelds;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("handhelds");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Pinballs;
const
  cColumns_Names: array [0 .. 10] of string = ('', '', '', '', '', '', '', '', '', '', '');
var
  vi: Integer;
  vList: TStringlist;
begin
  vList := TStringlist.Create;

  ExtraFE_Query_Local.Close;
  ExtraFE_Query_Local.SQL.Clear;
  ExtraFE_Query_Local.SQL.Text := 'PRAGMA table_info("pinballs");';
  ExtraFE_Query_Local.Open;

  for vi := 0 to ExtraFE_Query_Local.FieldList.Count - 1 do
  begin

  end;
end;

procedure Local_Columns;
begin
  Users;
  Users_Statistics;
  Settings;
  Options;
  Addons;
  Addon_Time;
  Addon_Time_Time;
  Addon_Calendar;
  Addon_Weather;
  Addon_Weather_OWM;
  Addon_Weather_Yahoo;
  Addon_Soundplayer;
  Addon_Soundplayer_Playlists;
  Addon_AzPlay;
  Emulators;
  Arcade;
  Arcade_Mame;
  Arcade_Media;
  Computers;
  Consoles;
  Handhelds;
  Pinballs;
end;

end.
