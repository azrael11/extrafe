unit uDB;

interface

uses
  System.Classes,
  System.SysUtils,
  FMX.Dialogs,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.FMXUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Phys.IB,
  FireDAC.Phys.IBLiteDef,
  FireDAC.Stan.StorageJSON,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.UI,
  ZAbstractRODataset,
  ZAbstractDataset,
  ZDataset,
  ZAbstractConnection,
  ZConnection;

{ Databases actions }

procedure Online_Create;
procedure Online_Create_Tables;
function Online_Connect: Boolean;
function Online_Disconnect: Boolean;

procedure Local_Create;
function Local_Connect: Boolean;
function Local_Disconnect: Boolean;

// function Local_Get_Users: Integer;

procedure Emulators_Create;
function Emulators_Connect: Boolean;
function Emulators_Disconnect: Boolean;

{ New User }
{ OnLine Database }
function Add_New_User_Online: Boolean;
{ Local Database }
function Add_New_User_Local: Boolean;

{ Queries Actions Local }
procedure Query_Insert(vQuery: TFDQuery; vTable, vColumns, vValues: String);
procedure Query_Update(vQuery: TFDQuery; vTable_Name, vCol, vValue, vRec, vWhere: string);
procedure Query_Create_New_Column(vQuery: TFDQuery; vTable_Name, vColumn_Name: String);
procedure Query_Delete_Table(vQuery: TFDQuery; vTable_Name: String);
procedure Query_Delete_Column(vDB_Conn: TFDConnection; vQuery: TFDQuery; vTable_Name, vColumn_Name: String);
procedure Query_Delete_Row(vQuery: TFDQuery; vTable_Name, vRec, vWhere: String);
procedure Query_Delete_ALL_From_Table(vQuery: TFDQuery; vTable_Name: String);

function Query_Select(vQuery: TFDQuery; vColumn, vTable, vRec, vWhere: String): String; Overload;
// function Query_Select(vQuery: TFDQuery; vColumn, vTable, vRec, vWhere: String): TStringList; Overload;
function Query_Count(vQuery: TFDQuery; vTable, vWhere, vCont: String): Integer;
function Query_Check_If_Column_Exists(vQuery: TFDQuery; vTable, vCol: String): Boolean;

{ Queries Actions Online }
procedure Query_Update_Online(vTable_Name, vCol, vValue, vUser_Num: string);
function Query_Select_Online(vColumn, vTable, vWhere: String): String;

var
  vColumns: String;
  vValues: String;

var
  { Databases }

  { Main ExtraFE Includes Addons }
  ExtraFE_DB: TZConnection; { Online MySQL }
  ExtraFE_Query: TZQuery; { Online MySQL }

  ExtraFE_DB_Local: TFDConnection; { Local SQLite }
  ExtraFE_Query_Local: TFDQuery; { Local SQLite }
  ExtraFE_Query_Local_2: TFDQuery; { Local SQLite }

  ExtraFE_FDGUIxWaitCursor: TFDGUIxWaitCursor;

  { Global Favorites }
  Fav: TFDConnection;
  Fav_Query: TFDQuery;

  { Emulators }
  { Arcade }
  Arcade: TFDConnection;
  Arcade_Query: TFDQuery;

  Mame: TFDConnection;
  Mame_Query: TFDQuery;

  { Computers }

  { Consoles }
  Nes: TFDConnection;
  Nes_Query: TFDQuery;

  { Handhelds }

  { Pinballs }

implementation

uses
  uLoad_AllTypes,
  main,
  load,
  emu,
  uLoad_Register,
  uDB_Check,
  uDB_AUser;

{ Online Database procedures }
procedure Online_Create;
begin
  ExtraFE_DB := TZConnection.Create(Main_Form);
  ExtraFE_DB.Name := 'ExtraFE_Database';
  ExtraFE_DB.Protocol := 'mysql';
  ExtraFE_DB.LibraryLocation := extrafe.prog.Lib_Path + 'libmysql.dll';
  { epizy.com
    //  ExtraFE_DB.HostName := 'sql210.epizy.com'; epizy.com needs premium plan cheap but premium
    //  ExtraFE_DB.User := 'epiz_23299538';
    //  ExtraFE_DB.Password := 'u4fbISfU';
    //  ExtraFE_DB.Database := 'epiz_23299538_extrafe';
    //  ExtraFE_DB.Port := 3306; }

  { ExtraFE_DB.HostName := 'db4free.net';  Is working but bcs it is free it is very slow some times and not good for debugging
    ExtraFE_DB.Port := 3306;
    ExtraFE_DB.User := 'azrael11';
    ExtraFE_DB.Password := '11azrael';
    ExtraFE_DB.Database := 'extrafe'; }

  ExtraFE_DB.HostName := 'localhost';
  ExtraFE_DB.Port := 3306;
  ExtraFE_DB.User := 'arcazrael_11';
  ExtraFE_DB.Password := '11azrael';
  ExtraFE_DB.Database := 'extrafe';

  ExtraFE_Query := TZQuery.Create(Main_Form);
  ExtraFE_Query.Name := 'ExtraFE_Database_Query';
  ExtraFE_Query.Connection := ExtraFE_DB;
end;

procedure Online_Create_Tables;
begin

end;

function Online_Connect: Boolean;
begin
  try
    ExtraFE_DB.Connect;
  except
    on E: Exception do
    begin
      // ShowMessage(E.ToString);
    end;
  end;
  Result := ExtraFE_DB.Connected;
end;

function Online_Disconnect: Boolean;
begin
  Query_Update_Online('USERS', 'ACTIVE', 'FALSE', uDB_AUser.Online.Num.ToString);
  ExtraFE_DB.Disconnect;
  Result := ExtraFE_DB.Connected;
end;

{ Local Database procedures }
procedure Local_Create;
begin
  { Main database }
  ExtraFE_DB_Local := TFDConnection.Create(main.Main_Form);
  ExtraFE_DB_Local.Name := 'ExtraFE_Local_Database';
  with ExtraFE_DB_Local do
  begin
    Close;
    with Params do
    begin
      Add('DriverID=SQLITE');
      Add('Database=' + extrafe.prog.Path + 'data\database\extrafe.db');
    end;
    Open;
  end;
  ExtraFE_DB_Local.LoginPrompt := False;

  { Favorites }
  Fav := TFDConnection.Create(main.Main_Form);
  Fav.Name := 'Favorites_Database';
  with Fav do
  begin
    Close;
    with Params do
    begin
      Add('DriverID=SQLITE');
      Add('Database=' + extrafe.prog.Path + 'data\database\favorites.db');
    end;
    Open;
  end;
  ExtraFE_DB_Local.LoginPrompt := False;

end;

function Local_Connect: Boolean;
begin
  Result := False;
  ExtraFE_DB_Local.Connected := True;

  if ExtraFE_DB_Local.Connected then
    Result := True;

  ExtraFE_Query_Local := TFDQuery.Create(main.Main_Form);
  ExtraFE_Query_Local.Name := 'ExtraFE_Local_Query';
  ExtraFE_Query_Local.Connection := ExtraFE_DB_Local;
  ExtraFE_Query_Local.Active := False;

  ExtraFE_Query_Local_2 := TFDQuery.Create(main.Main_Form);
  ExtraFE_Query_Local_2.Name := 'ExtraFE_Local_Query';
  ExtraFE_Query_Local_2.Connection := ExtraFE_DB_Local;
  ExtraFE_Query_Local_2.Active := False;

  uDB_Check.Local_tables;

  ExtraFE_FDGUIxWaitCursor := TFDGUIxWaitCursor.Create(load.Loading);
  ExtraFE_FDGUIxWaitCursor.Name := 'ExtraFE_Local_GUIxWaitCursor';

  Fav.Connected := True;

  Fav_Query := TFDQuery.Create(main.Main_Form);
  Fav_Query.Name := 'ExtraFE_Local_Query';
  Fav_Query.Connection := ExtraFE_DB_Local;
  Fav_Query.Active := False;
end;

function Local_Disconnect: Boolean;
begin
  Result := False;
  ExtraFE_DB_Local.Connected := False;
  if ExtraFE_DB_Local.Connected = False then
    Result := True;
end;

procedure Emulators_Create;
var
  vi, vk: Integer;
begin

  { Arcade }
  Arcade := TFDConnection.Create(emu.Emu_Form);
  Arcade.Name := 'Arcade_Database';
  with Arcade do
  begin
    Close;
    with Params do
    begin
      Add('DriverID=SQLITE');
      Add('Database=' + extrafe.prog.Path + 'data\database\arcade\arcade.db');
    end;
    Open;
  end;
  Arcade.LoginPrompt := False;

  Mame := TFDConnection.Create(emu.Emu_Form);
  Mame.Name := 'Mame_Database';
  with Mame do
  begin
    Close;
    with Params do
    begin
      Add('DriverID=SQLITE');
      Add('Database=' + extrafe.prog.Path + 'data\database\arcade\mame.db');
    end;
    Open;
  end;
  Arcade.LoginPrompt := False;

  { Computers }

  { Consoles }
  Nes := TFDConnection.Create(emu.Emu_Form);
  Nes.Name := 'Nes_Database';
  with Nes do
  begin
    Close;
    with Params do
    begin
      Add('DriverID=SQLITE');
      Add('Database=' + extrafe.prog.Path + 'data\database\consoles\nes.db');
    end;
    Open;
  end;
  Arcade.LoginPrompt := False;

  { Handhelds }

  { Pinballs }

end;

function Emulators_Connect: Boolean;
begin

  { Arcade }
  Arcade.Connected := True;
  Arcade_Query := TFDQuery.Create(emu.Emu_Form);
  Arcade_Query.Name := 'Arcade_Local_Query';
  Arcade_Query.Connection := Arcade;
  Arcade_Query.Active := False;

  Mame.Connected := True;
  Mame_Query := TFDQuery.Create(emu.Emu_Form);
  Mame_Query.Name := 'Mame_Local_Query';
  Mame_Query.Connection := Mame;
  Mame_Query.Active := False;

  { Consoles }
  Nes.Connected := True;
  Nes_Query := TFDQuery.Create(emu.Emu_Form);
  Nes_Query.Name := 'Nes_Local_Query';
  Nes_Query.Connection := Nes;
  Nes_Query.Active := False;

end;

function Emulators_Disconnect: Boolean;
begin

end;

{ New User }
{ OnLine Database }
function Add_New_User_Online: Boolean;
begin
  Result := False;
  ExtraFE_Query.Close;
  ExtraFE_Query.SQL.Clear;
  ExtraFE_Query.ParamCheck := False;
  ExtraFE_Query.SQL.Add('INSERT INTO USERS (USER_ID, USERNAME, PASSWORD, EMAIL, AVATAR, NAME, SURNAME, GENDER, IP, COUNTRY, REGISTERED, LAST_VISIT) VALUES ("' +
    User_Reg.User_ID + '", "' + User_Reg.Username + '", "' + User_Reg.Password + '", "' + User_Reg.Email + '", "' + User_Reg.Avatar + '", "' + User_Reg.Name +
    '", "' + User_Reg.Surname + '", "' + User_Reg.Genre + '", "' + User_Reg.IP + '", "' + User_Reg.Country + '", "' + User_Reg.Registered.ToString + '", "' +
    User_Reg.Last_Visit.ToString + '")');
  ExtraFE_Query.ExecSQL;
  Result := True;
end;

{ Local Database }
function Add_New_User_Local: Boolean;
var
  vPath: array [0 .. 40] of string;
  vLocal_Num: String;
  procedure free_vpath;
  var
    vi: Integer;
  begin
    for vi := 0 to 40 do
      vPath[vi] := '';
  end;

begin
  Result := False;
  vLocal_Num := (uDB_AUser.Local.User.Num + 1).ToString;

  { User Settings }
  vPath[0] := extrafe.prog.Path;
  vPath[1] := 'ExtraFE.exe';
  vPath[2] := vPath[0] + '\lib\';
  vPath[3] := vPath[0] + '\data\database\history\';
  vPath[4] := vPath[0] + '\data\main\fonts\';
  vPath[5] := 'Air';
  vPath[6] := vPath[0] + '\data\themes\';
  vPath[7] := '1';
  vPath[8] := vPath[0] + '\data\';
  vPath[9] := vPath[0] + '\data\database\';

  vColumns :=
    'Resolution_Width, Resolution_Height, Foulscreen, Path, Name, Path_Lib, Path_History, Path_Fonts, Theme_Name, Theme_Path, Theme_Num, Local_Data, Path_Database';
  vValues := '"1920", "1080", "TRUE", "' + vPath[0] + '",  "' + vPath[1] + '",  "' + vPath[2] + '",  "' + vPath[3] + '", "' + vPath[4] + '", "' + vPath[5] +
    '", "' + vPath[6] + '", "' + vPath[7] + '", "' + vPath[8] + '", "' + vPath[9] + '"';
  Query_Insert(ExtraFE_Query_Local, 'SETTINGS', vColumns, vValues);

  { User data }
  vColumns := 'Unique_ID, Username, Password, Email, Avatar, Name, Surname, Gender, IP, Country, Registered, Last_Visit_Online, Last_Visit, Active_Online';
  vValues := '"' + User_Reg.User_ID + '", "' + User_Reg.Username + '", "' + User_Reg.Password + '", "' + User_Reg.Email + '", "' + User_Reg.Avatar + '", "' +
    User_Reg.Name + '", "' + User_Reg.Surname + '", "' + User_Reg.Genre + '", "' + User_Reg.IP + '", "' + User_Reg.Country + '", "' +
    User_Reg.Registered.ToString + '", "' + User_Reg.Last_Visit.ToString + '", "' + User_Reg.Last_Visit.ToString + '", "1"';
  Query_Insert(ExtraFE_Query_Local, 'USERS', vColumns, vValues);

  { Option Data }
  vColumns := 'Virtual_Keyboard';
  vValues := '"0"';
  Query_Insert(ExtraFE_Query_Local, 'OPTIONS', vColumns, vValues);

  free_vpath;
  vPath[0] := 'UP_ARROW';
  vPath[1] := 'DOWN_ARROW';
  vPath[2] := 'LEFT_ARROW';
  vPath[3] := 'RIGHT_ARROW';
  vPath[4] := 'ENTER';
  vPath[5] := 'ESCAPE';
  vPath[6] := 'C';
  vPath[7] := 'UP_ARROW';
  vPath[8] := 'DOWN_ARROW';
  vPath[9] := 'LEFT_ARROW';
  vPath[10] := 'RIGHT_ARROW';
  vPath[11] := 'ENTER';
  vPath[12] := 'ESCAPE';
  vPath[13] := 'R';
  vPath[14] := 'E';
  vPath[15] := 'F';
  vPath[16] := 'L';
  vPath[17] := 'S';
  vPath[18] := 'C';
  vPath[19] := 'Q';
  vColumns :=
    'User_Id, Main_Up, Main_Down, Main_Left, Main_Right, Main_Action, Main_Escape, Main_Config, Emu_Up, Emu_Down, Emu_Left, Emu_Right, Emu_Action, Emu_Escape, Emu_Fav, Emu_AddFav, Emu_Filters, Emu_Lists, Emu_Search, Emu_Config, Emu_Screensaver';
  vValues := '"' + vLocal_Num + '", "' + vPath[0] + '", "' + vPath[1] + '", "' + vPath[2] + '", "' + vPath[3] + '", "' + vPath[4] + '", "' + vPath[5] + '", "' +
    vPath[6] + '", "' + vPath[7] + '", "' + vPath[8] + '", "' + vPath[9] + '", "' + vPath[10] + '", "' + vPath[11] + '", "' + vPath[12] + '", "' + vPath[13] +
    '", "' + vPath[14] + '", "' + vPath[15] + '", "' + vPath[16] + '", "' + vPath[17] + '", "' + vPath[18] + '", "' + vPath[19] + '" ';
  Query_Insert(ExtraFE_Query_Local, 'map_keyboard', vColumns, vValues);

  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'map_mouse', vColumns, vValues);

  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'map_joystick_mmsystem', vColumns, vValues);

  { User Statistics data }
  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Users_Statistics', vColumns, vValues);

  { Emulation data }
  free_vpath;
  vPath[0] := extrafe.prog.Path + 'emu\';

  vColumns := 'user_id, Path';
  vValues := '"' + vLocal_Num + '", "' + vPath[0] + '"';
  Query_Insert(ExtraFE_Query_Local, 'Emulators', vColumns, vValues);

  { Arcade Section Start }
  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Arcade', vColumns, vValues);

  { Media }
  free_vpath;
  vPath[0] := extrafe.prog.Path + 'emu\arcade\media\artworks\';
  vPath[1] := extrafe.prog.Path + 'emu\arcade\media\cabinets\';
  vPath[2] := extrafe.prog.Path + 'emu\arcade\media\control_panels\';
  vPath[3] := extrafe.prog.Path + 'emu\arcade\media\covers\';
  vPath[4] := extrafe.prog.Path + 'emu\arcade\media\flyers\';
  vPath[5] := extrafe.prog.Path + 'emu\arcade\media\fanart\';
  vPath[6] := extrafe.prog.Path + 'emu\arcade\media\game_over\';
  vPath[7] := extrafe.prog.Path + 'emu\arcade\media\icons\';
  vPath[8] := extrafe.prog.Path + 'emu\arcade\media\manuals\';
  vPath[9] := extrafe.prog.Path + 'emu\arcade\media\marquees\';
  vPath[10] := extrafe.prog.Path + 'emu\arcade\media\pcbs\';
  vPath[11] := extrafe.prog.Path + 'emu\arcade\media\snapshots\';
  vPath[12] := extrafe.prog.Path + 'emu\arcade\media\titles\';
  vPath[13] := extrafe.prog.Path + 'emu\arcade\media\artwork_preview\';
  vPath[14] := extrafe.prog.Path + 'emu\arcade\media\bosses\';
  vPath[15] := extrafe.prog.Path + 'emu\arcade\media\ends\';
  vPath[16] := extrafe.prog.Path + 'emu\arcade\media\how_to\';
  vPath[17] := extrafe.prog.Path + 'emu\arcade\media\logos\';
  vPath[18] := extrafe.prog.Path + 'emu\arcade\media\scores\';
  vPath[19] := extrafe.prog.Path + 'emu\arcade\media\selects\';
  vPath[20] := extrafe.prog.Path + 'emu\arcade\media\stamps\';
  vPath[21] := extrafe.prog.Path + 'emu\arcade\media\versus\';
  vPath[22] := extrafe.prog.Path + 'emu\arcade\media\warnings\';
  vPath[23] := extrafe.prog.Path + 'emu\arcade\media\soundtracks\';
  vPath[24] := extrafe.prog.Path + 'emu\arcade\media\support_files\';
  vPath[25] := extrafe.prog.Path + 'emu\arcade\media\videos\';

  vColumns := 'Artworks, Cabinets, Control_Panels, Covers, Flyers, Fanart, Game_Over, Icons, Manuals, Marqueess, PCBs, Snapshots, Titles, ' +
    'Artwork_Preview, Bosses, Ends, How_To, Logos, Scores, Selects, Stamps, Versus, Warnings, Soundtracks, Support_Files, Videos';
  vValues := '"' + vPath[0] + '", "' + vPath[1] + '", "' + vPath[2] + '", "' + vPath[3] + '", "' + vPath[4] + '", "' + vPath[5] + '", "' + vPath[6] + '", "' +
    vPath[7] + '", "' + vPath[8] + '", "' + vPath[9] + '", "' + vPath[10] + '" , "' + vPath[11] + '", "' + vPath[12] + '", "' + vPath[13] + '", "' + vPath[14] +
    '", "' + vPath[15] + '", "' + vPath[16] + '", "' + vPath[17] + '", "' + vPath[18] + '", "' + vPath[19] + '", "' + vPath[20] + '", "' + vPath[21] + '", "' +
    vPath[22] + '", "' + vPath[23] + '", "' + vPath[24] + '", "' + vPath[25] + '"';
  Query_Insert(ExtraFE_Query_Local, 'Arcade_Media', vColumns, vValues);

  { Mame }
  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Arcade_Mame', vColumns, vValues);
  { Arcade Section End }

  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Computers', vColumns, vValues);

  { Consoles Section Start }
  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Consoles', vColumns, vValues);

  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Consoles_Nes', vColumns, vValues);

  { Consoles Section End }

  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Handhelds', vColumns, vValues);

  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Pinballs', vColumns, vValues);

  { Addons data }
  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Addons', vColumns, vValues);

  { Addons Time }
  free_vpath;
  vPath[0] := extrafe.prog.Path + 'data\addons\time\images\';
  vPath[1] := extrafe.prog.Path + 'data\addons\time\sounds\';
  vPath[2] := extrafe.prog.Path + 'data\addons\time\clock\';

  vColumns := 'user_id, Menu_Position, First_Pop, Path_Images, Path_Sounds, Path_Clocks';
  vValues := '"' + vLocal_Num + '", "0", TRUE, "' + vPath[0] + '", "' + vPath[1] + '", "' + vPath[2] + '"';
  Query_Insert(ExtraFE_Query_Local, 'ADDON_TIME', vColumns, vValues);

  { Addons Time Time Data }
  vColumns := 'user_id';
  vValues := '"' + vLocal_Num + '"';
  Query_Insert(ExtraFE_Query_Local, 'Addon_Time_Time', vColumns, vValues);

  { Addons Calendar }
  vColumns := 'user_id, Menu_Position';
  vValues := '"' + vLocal_Num + '" , "1"';
  Query_Insert(ExtraFE_Query_Local, 'Addon_Calendar', vColumns, vValues);

  { Addons Weather }
  free_vpath;
  vPath[0] := extrafe.prog.Path + 'data\addons\weather\icons\';
  vPath[1] := extrafe.prog.Path + 'data\addons\weather\images\';
  vPath[2] := extrafe.prog.Path + 'data\addons\weather\sounds\';
  vPath[3] := extrafe.prog.Path + 'data\addons\weather\temp\';

  vColumns := 'user_id, Path_Icons, Path_Images, Path_Sounds, Path_Temp';
  vValues := '"' + vLocal_Num + '", "' + vPath[0] + '", "' + vPath[1] + '", "' + vPath[2] + '", "' + vPath[3] + '"';
  Query_Insert(ExtraFE_Query_Local, 'Addon_Weather', vColumns, vValues);

  { Addons SoundPlayer }
  free_vpath;
  vPath[0] := extrafe.prog.Path + 'data\addons\soundplayer\images\';
  vPath[1] := extrafe.prog.Path + 'data\addons\soundplayer\playlists\';
  vPath[2] := extrafe.prog.Path + 'data\addons\soundplayer\sounds\';

  vColumns := 'user_id, Path_Images, Path_Playlists, Path_Sounds';
  vValues := '"' + vLocal_Num + '", "' + vPath[0] + '", "' + vPath[1] + '", "' + vPath[2] + '"';
  Query_Insert(ExtraFE_Query_Local, 'Addon_Soundplayer', vColumns, vValues);

  { Addons AzPlay }

  vColumns := 'user_id, Count, Active, AzHung';
  vValues := '"' + vLocal_Num + '", "4", "0", "1"';
  Query_Insert(ExtraFE_Query_Local, 'Addon_AzPlay', vColumns, vValues);
end;

{ Queries Actions Local }
procedure Query_Insert(vQuery: TFDQuery; vTable, vColumns, vValues: String);
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  vQuery.SQL.Add('INSERT INTO ' + vTable + ' (' + vColumns + ') VALUES (' + vValues + ' )');
  vQuery.ExecSQL;
end;

procedure Query_Update(vQuery: TFDQuery; vTable_Name, vCol, vValue, vRec, vWhere: string);
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  vQuery.SQL.Add('UPDATE ' + vTable_Name + ' SET ' + vCol + '="' + vValue + '" WHERE "' + vRec + '"="' + vWhere + '"');
  vQuery.ExecSQL;
end;

function Query_Select(vQuery: TFDQuery; vColumn, vTable, vRec, vWhere: String): String; Overload;
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  vQuery.SQL.Add('SELECT ' + vColumn + ' FROM ' + vTable + ' WHERE ' + vRec + '="' + vWhere + '"');
  vQuery.Open;
  vQuery.First;
  Result := vQuery.FieldByName(vColumn).AsString;
end;

{ Queries Actions Online }
procedure Query_Update_Online(vTable_Name, vCol, vValue, vUser_Num: string);
begin
  ExtraFE_Query.Close;
  ExtraFE_Query.SQL.Clear;
  ExtraFE_Query.SQL.Add('UPDATE ' + vTable_Name + ' SET ' + vCol + '=''' + vValue + ''' WHERE NUM=' + vUser_Num);
  ExtraFE_Query.ExecSQL;
end;

function Query_Select_Online(vColumn, vTable, vWhere: String): String;
var
  vQuery, vField: String;
begin
  ExtraFE_Query.Close;
  ExtraFE_Query.SQL.Clear;
  ExtraFE_Query.SQL.Add('SELECT ' + vColumn + ' FROM ' + vTable + ' WHERE NUM=' + vWhere);
  ExtraFE_Query.Open;
  ExtraFE_Query.First;
  Result := ExtraFE_Query_Local.FieldByName(vColumn).AsString;
  ExtraFE_Query.Close;
end;

function Query_Count(vQuery: TFDQuery; vTable, vWhere, vCont: String): Integer;
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  if vWhere <> '' then
    vQuery.SQL.Text := 'SELECT COUNT(*) FROM ' + vTable + ' WHERE ' + vWhere + '="' + vCont + '"'
  else
    vQuery.SQL.Text := 'SELECT COUNT(*) FROM ' + vTable;
  vQuery.Open;
  Result := vQuery.Fields[0].AsInteger;
end;

procedure Query_Delete_Table(vQuery: TFDQuery; vTable_Name: String);
begin
  { Must create it }
end;

procedure Query_Create_New_Column(vQuery: TFDQuery; vTable_Name, vColumn_Name: String);
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  vQuery.SQL.Text := 'ALTER TABLE ' + vTable_Name + ' ADD COLUMN ' + vColumn_Name;
  vQuery.ExecSQL;
end;

procedure Query_Delete_Column(vDB_Conn: TFDConnection; vQuery: TFDQuery; vTable_Name, vColumn_Name: String);
var
  vList_Name, vList_Type, vList_NN, vList_DV, vList_PK: TStringList;
  vi: Integer;
  vFound: Boolean;
  vTables, vSTables, isNull, isDefault, isPrimaryKey: String;
begin
  vList_Name := TStringList.Create;
  vList_Type := TStringList.Create;
  vList_NN := TStringList.Create;
  vList_DV := TStringList.Create;
  vList_PK := TStringList.Create;

  vQuery.Close;
  vQuery.Open('PRAGMA table_info(' + vTable_Name + ')');
  vQuery.DisableControls;
  vQuery.First;

  try
    while not vQuery.Eof do
    begin
      vList_Name.Add(vQuery.FieldByName('name').AsString);
      vList_Type.Add(vQuery.FieldByName('type').AsString);
      vList_NN.Add(vQuery.FieldByName('notnull').AsString);
      vList_DV.Add(vQuery.FieldByName('dflt_value').AsString);
      vList_PK.Add(vQuery.FieldByName('pk').AsString);
      uDB.Arcade_Query.Next;
    end;
  finally
    vQuery.EnableControls;
  end;

  vFound := False;
  for vi := 0 to vList_Name.Count - 1 do
    if vList_Name[vi] = vColumn_Name then
    begin
      vList_Name.Delete(vi);
      vList_Type.Delete(vi);
      vList_NN.Delete(vi);
      vList_DV.Delete(vi);
      vList_PK.Delete(vi);
      vFound := True;
      Break
    end;

  for vi := 0 to vList_Name.Count - 1 do
  begin
    if vList_NN.Strings[vi] = '0' then
      isNull := ''
    else
      isNull := 'NOT NULL';

    if vList_DV.Strings[vi] = '' then
      isDefault := ''
    else
      isDefault := 'DEFAULT ' + vList_DV.Strings[vi];

    if vList_PK.Strings[vi] = '0' then
      isPrimaryKey := ''
    else
      isPrimaryKey := 'PRIMARY KEY AUTOINCREMENT';

    if vi = 0 then
    begin
      vTables := '"' + vList_Name.Strings[vi] + '" ' + vList_Type.Strings[vi] + ' ' + isNull + ' ' + isDefault + ' ' + isPrimaryKey;
      vSTables := vList_Name.Strings[vi];
    end
    else
    begin
      vTables := vTables + ', "' + vList_Name.Strings[vi] + '" ' + vList_Type.Strings[vi] + ' ' + isNull + ' ' + isDefault + ' ' + isPrimaryKey;
      vSTables := vSTables + ', ' + vList_Name.Strings[vi];
    end;
  end;

  if vFound then
  begin
    if ExtraFE_DB_Local.Transaction <> nil then
    begin
      if vDB_Conn.Transaction.Active = False then
      begin
        vDB_Conn.StartTransaction;
        vQuery.Close;
        vQuery.SQL.Clear;
        vQuery.SQL.Add('PRAGMA foreign_keys=off;');
        // vQuery.SQL.Add('BEGIN TRANSACTION;');
        vQuery.SQL.Add('CREATE TABLE temp_table(' + vTables + ');');
        vQuery.SQL.Add('INSERT INTO temp_table SELECT ' + vSTables + ' FROM ' + vTable_Name + ';');
        vQuery.SQL.Add('DROP TABLE ' + vTable_Name + ';');
        vQuery.SQL.Add('ALTER Table temp_table RENAME to ' + vTable_Name + ';');
        // vQuery.SQL.Add('COMMIT;');
        vQuery.SQL.Add('PRAGMA foreign_keys=on;');
        vQuery.ExecSQL;
        vDB_Conn.Commit;
      end
    end
    else
    begin
      vDB_Conn.StartTransaction;
      vQuery.Close;
      vQuery.SQL.Clear;
      vQuery.SQL.Add('PRAGMA foreign_keys=off;');
      // vQuery.SQL.Add('BEGIN TRANSACTION;');
      vQuery.SQL.Add('CREATE TABLE temp_table(' + vTables + ');');
      vQuery.SQL.Add('INSERT INTO temp_table SELECT ' + vSTables + ' FROM ' + vTable_Name + ';');
      vQuery.SQL.Add('DROP TABLE ' + vTable_Name + ';');
      vQuery.SQL.Add('ALTER Table temp_table RENAME to ' + vTable_Name + ';');
      // vQuery.SQL.Add('COMMIT;');
      vQuery.SQL.Add('PRAGMA foreign_keys=on;');
      vQuery.ExecSQL;
      vDB_Conn.Commit;
    end;
  end;

  FreeAndNil(vList_Name);
  FreeAndNil(vList_Type);
  FreeAndNil(vList_NN);
  FreeAndNil(vList_DV);
  FreeAndNil(vList_PK);
end;

procedure Query_Delete_Row(vQuery: TFDQuery; vTable_Name, vRec, vWhere: String);
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  vQuery.SQL.Text := 'DELETE FROM ' + vTable_Name + ' WHERE ' + vRec + '="' + vWhere + '"';
  vQuery.ExecSQL;

end;

procedure Query_Delete_ALL_From_Table(vQuery: TFDQuery; vTable_Name: String);
begin
  vQuery.Close;
  vQuery.SQL.Clear;
  vQuery.SQL.Text := 'DELETE FROM ' + vTable_Name;
  vQuery.ExecSQL;
end;

function Query_Check_If_Column_Exists(vQuery: TFDQuery; vTable, vCol: String): Boolean;
begin
  Result := False;
  vQuery.Close;
  vQuery.Open('PRAGMA table_info(' + vTable + ')');
  vQuery.DisableControls;
  vQuery.First;

  while not vQuery.Eof do
  begin
    if vCol = vQuery.FieldByName('name').AsString then
    begin
      Result := True;
      Break
    end;
    vQuery.Next;
  end;
  vQuery.EnableControls;
end;

// function Query_Select(vQuery: TFDQuery; vColumn, vTable, vRec, vWhere: String): TStringList; Overload;
// begin
//
// end;
end.
