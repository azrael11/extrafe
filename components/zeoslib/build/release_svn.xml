<?xml version="1.0"?>
<project name="svn-zeos" basedir="." default="buildTesting">
  
  <!--  all properties are in build.properties --> 
  <property file="build.properties" /> 
  <property name="root.dir" value="${project.home}"/>

  <property name="temp.dir" value="${root.dir}/temp"/>
  <property name="checktemp.dir" value="${root.dir}/checktemp"/>
  <property name="release.dir" value="${root.dir}/releases"/>
  <property name="logs.dir" value="${root.dir}/build/logs"/>


  <property name="build.majorversion" value="0"/>
  <property name="build.minorversion" value="0"/>
  <property name="build.release" value="0"/>
  <property name="build.prerelease" value="1"/>
  <property name="build.status" value="alpha"/>
  <property name="build.fileversion" value="${build.majorversion}.${build.minorversion}.${build.release}"/>
  <property name="build.productversion" value="${build.fileversion}-${build.status}"/>


<!-- default SVN dirs-->
  <property name="url.testing" value="https://svn.code.sf.net/p/zeoslib/code-0/branches/testing"/>
  <property name="url.trunk" value="https://svn.code.sf.net/p/zeoslib/code-0/trunk"/>
  <property name="url.stable" value="https://svn.code.sf.net/p/zeoslib/code-0/trunk"/>
  <property name="url.tag" value="https://svn.code.sf.net/p/zeoslib/code-0/tags/${build.productversion}"/>
 
  <!-- path to the svnant libraries. Usually they will be located in ANT_HOME/lib -->
  <path id="project.classpath">
    <pathelement location=".\svnjavahl.jar" /> 
    <pathelement location=".\svnant.jar" />
    <pathelement location=".\svnClientAdapter.jar" />
  </path>  
  <!-- load the svn task -->
  <taskdef resource="svntask.properties" classpathref="project.classpath"/>
  <target name="prepare">
    <mkdir dir="${logs.dir}" />

    <tstamp>
      <format property="tstamp" pattern="yyyyMMdd" />
    </tstamp>

    <property name="log.file" value="${logs.dir}/packaging-${tstamp}.log"/>
  </target>


  <target name="buildTesting" depends="prepare">
     <antcall target="buildZip">
      <param name="branch" value="TESTING"/>
      <param name="url" value="${url.testing}"/>
      <param name="smallZip" value="true"/>
      <param name="fullZip" value="true"/>
    </antcall>
</target>

  <target name="buildTrunk" depends="prepare">
     <antcall target="buildZip">
      <param name="branch" value="TRUNK"/>
      <param name="url" value="${url.trunk}"/>
      <param name="fullZip" value="true"/>
    </antcall>
  </target>

  <target name="buildStable" depends="prepare">
     <antcall target="buildZip">
      <param name="branch" value="STABLE"/>
      <param name="url" value="${url.stable}"/>
      <param name="fullZip" value="true"/>
    </antcall>
  </target>

  <target name="buildTagged" depends="prepare">
     <antcall target="buildTagZip">
      <param name="branch" value="TAG"/>
      <param name="url" value="${url.tag}"/>
      <param name="fullZip" value="true"/>
    </antcall>
  </target>

<!-- target for building a draft release before the version tag is actually made -->
  <target name="buildTrunkAsTagged" depends="prepare">
    <echo message="Building Trunk as Tagged release"
      file="${log.file}" append="true" />

     <antcall target="buildTagZip">
      <param name="branch" value="TAG"/>
      <param name="url" value="${url.trunk}"/>
      <param name="fullZip" value="true"/>
    </antcall>
  </target>

<!-- target for building a stable draft release before the version tag is actually made -->
  <target name="buildStableAsTagged" depends="prepare">
    <echo message="Building Trunk as Tagged release"
      file="${log.file}" append="true" />

     <antcall target="buildTagZip">
      <param name="branch" value="TAG"/>
      <param name="url" value="${url.stable}"/>
      <param name="fullZip" value="true"/>
    </antcall>
  </target>

  <target name="buildZip">
    <delete dir="${checktemp.dir}" />
    <!--svn username="anonymous" password="guest"-->
    <svn>
      <checkout url="${url}" recurse="false" revision="HEAD" destPath="${checktemp.dir}" />
      <status path="${checktemp.dir}" textStatusProperty="testStatus.textStatus" propStatusProperty="testStatus.propStatus" lastChangedRevisionProperty="testStatus.lastCommitRevision" revisionProperty="testStatus.revision" lastCommitAuthorProperty="testStatus.lastCommitAuthor" urlProperty="testStatus.url" />
    </svn>
    <property name="revision" value="${testStatus.lastCommitRevision}"/>
    <property name="outfiles_basename" value="${release.dir}/ZEOSLIB_${branch}_REV${revision}"/>


    <delete dir="${checktemp.dir}" />

    <delete dir="${temp.dir}" />

    <svn username="anonymous" password="guest">
      <export srcUrl="${url}" revision="HEAD" destPath="${temp.dir}" />
    </svn>

     <antcall target="buildFullZip" />
     <antcall target="buildSmallZip" />
     <antcall target="buildDelphiCode2Doc" />

    <delete dir="${temp.dir}" />
    <echo message="Releasing Zeos DBO Project (${branch})... revision ${revision}"/>
  </target>

 <target name="buildFullZip" if="fullZip">
    <delete file="${outfiles_basename}.zip" />
    <zip zipfile="${outfiles_basename}.zip">
      <fileset dir="${temp.dir}" casesensitive="no"/>
    </zip>
    <checksum file="${outfiles_basename}.zip" forceoverwrite="yes"/>
    <checksum file="${outfiles_basename}.zip" algorithm="SHA" forceoverwrite="yes"/>
  </target>

 <target name="buildSmallZip" if="smallZip">
    <delete file="${outfiles_basename}_COMPACT.zip" />
    <zip zipfile="${outfiles_basename}_COMPACT.zip">
      <fileset dir="${temp.dir}" casesensitive="no">
         <exclude name="**/lib/**"/>
         <exclude name="**/documentation/**"/>
         <exclude name="**/artwork/**"/>
      </fileset>
    </zip>
    <checksum file="${outfiles_basename}_COMPACT.zip" forceoverwrite="yes"/>
    <checksum file="${outfiles_basename}_COMPACT.zip" algorithm="SHA" forceoverwrite="yes"/>
  </target>

  <target name="buildTagZip">
    <delete dir="${temp.dir}" />

    <svn username="anonymous" password="guest">
      <export srcUrl="${url}" revision="HEAD" destPath="${temp.dir}" />
    </svn>
    <property name="outfiles_basename" value="${release.dir}/ZEOSDBO-${build.productversion}"/>

     <antcall target="buildVersionZip" />
     <antcall target="buildDoxygen" />
     <!--antcall target="buildDelphiCode2Doc" /-->

    <delete dir="${temp.dir}" />
    <echo message="Releasing Zeos DBO Project (Version ${build.productversion})"/>
  </target>

  <target name="buildVersionZip">

    <antcall target="buildDoc" />

    <delete file="${outfiles_basename}.zip" />
    <zip zipfile="${outfiles_basename}.zip">
      <fileset dir="${temp.dir}" casesensitive="no">
         <include name="*.txt"/>
         <include name="doc/html/**"/>
         <include name="doc/pdf/**"/>
         <include name="src/**"/>
         <include name="packages/*/*"/>
         <include name="examples/**"/>
         <exclude name="packages/*/ztest*"/>
         <exclude name="packages/*/*dev*"/>
         <include name="packages/*/build/dummy.txt"/>
      </fileset>
    </zip>
    <checksum file="${outfiles_basename}.zip" forceoverwrite="yes"/>
    <checksum file="${outfiles_basename}.zip" algorithm="SHA" forceoverwrite="yes"/>
  </target>

  <target name="buildDoc">
    <delete dir="${temp.dir}/doc" />

    <exec osfamily="windows" executable="${ede.home}/bat/docbook_deploy_all.bat" dir="${temp.dir}/documentation" output="${log.file}" append="true" failonerror="true">
        <env key="ZEOS_DIR" path="${temp.dir}"/>
    </exec>
    <copy todir="${temp.dir}/doc/html" flatten="true" overwrite="true" preservelastmodified="true" includeEmptyDirs="false">
      <fileset dir="${temp.dir}/documentation/articles_generated/output"  casesensitive="no">
         <include name="*/html/*"/>
      </fileset>
    </copy>
    <copy todir="${temp.dir}/doc/html/images" flatten="true" overwrite="true" preservelastmodified="true" includeEmptyDirs="false">
      <fileset dir="${temp.dir}/documentation/articles_generated/output"  casesensitive="no">
         <include name="*/html/images/*"/>
      </fileset>
    </copy>
    <copy todir="${temp.dir}/doc/pdf" flatten="true" overwrite="true" preservelastmodified="true" includeEmptyDirs="false">
      <fileset dir="${temp.dir}/documentation/articles_generated/output"  casesensitive="no">
         <include name="*/pdf/*.pdf"/>
      </fileset>
    </copy>
</target>

<target name="buildDoxygen" depends="prepare">
    <exec osfamily="windows" executable="${temp.dir}/documentation/doxygen_build.bat" dir="${temp.dir}/documentation" output="${log.file}" append="true" failonerror="true"/>

    <copy todir="${temp.dir}/doc/doxygen" overwrite="true" preservelastmodified="true" includeEmptyDirs="false" >
      <fileset dir="${temp.dir}/doc/doxy/html"  casesensitive="no">
         <include name="**"/>
      </fileset>
    </copy>
    <delete dir="${temp.dir}/doc/doxy" />
    <property name="outfiles_basename" value="${release.dir}/ZEOSDBO-${build.productversion}"/>

    <delete file="${outfiles_basename}_doxygen.zip" />
    <zip zipfile="${outfiles_basename}_doxygen.zip">
      <fileset dir="${temp.dir}/doc/doxygen"  casesensitive="no">
         <include name="**"/>
      </fileset>
    </zip>
    <checksum file="${outfiles_basename}_doxygen.zip" forceoverwrite="yes"/>
    <checksum file="${outfiles_basename}_doxygen.zip" algorithm="SHA" forceoverwrite="yes"/>
  </target>
  
<target name="buildDelphiCode2Doc" depends="prepare">
    <exec osfamily="windows" executable="${delphicode2doc.home}/DCTD_cmd.exe" output="${log.file}" append="true" failonerror="true">
        <arg path="${temp.dir}/documentation/Zeoslibcode2doc.xml"/>
       </exec>
    <property name="outfiles_basename" value="${release.dir}/ZEOSDBO-${build.productversion}"/>

    <delete file="${outfiles_basename}_DelphiCode2Doc_html.zip" />
    <zip zipfile="${outfiles_basename}_DelphiCode2Doc_html.zip">
      <fileset dir="${temp.dir}/doc/ZeosDelphiCode2Doc/html/" casesensitive="no">
         <include name="**"/>
      </fileset>
    </zip>
    <checksum file="${outfiles_basename}_DelphiCode2Doc_html.zip" forceoverwrite="yes"/>
    <checksum file="${outfiles_basename}_DelphiCode2Doc_html.zip" algorithm="SHA" forceoverwrite="yes"/>

    <delete file="${outfiles_basename}_DelphiCode2Doc_chm.zip" />
    <zip zipfile="${outfiles_basename}_DelphiCode2Doc_chm.zip">
      <fileset dir="${temp.dir}/doc/ZeosDelphiCode2Doc/chm/"  casesensitive="no">
         <include name="*.chm"/>
      </fileset>
    </zip>
    <checksum file="${outfiles_basename}_DelphiCode2Doc_chm.zip" forceoverwrite="yes"/>
    <checksum file="${outfiles_basename}_DelphiCode2Doc_chm.zip" algorithm="SHA" forceoverwrite="yes"/>
  </target>
  
  </project>