unit uTIme_Time_Actions;

interface
uses
  System.Classes,
  System.SysUtils,
  System.UiTypes;

  procedure uTime_Time_Actions_Update_Analog;
  procedure uTime_Time_Actions_Update_Digital;

  procedure uTime_Time_Actions_ShowType(vType: String);
  procedure uTime_Time_Actions_ShowAnalog;
  procedure uTime_Time_Actions_ShowDigital;
  procedure uTime_Time_Actions_ShowBoth;

  procedure uTime_Time_Actions_ShowBothType(vType: String);
  procedure uTime_Time_Actions_ShowBoth_Default;
  procedure uTime_Time_Actions_ShowBoth_A_Up_D_Down;
  procedure uTime_Time_Actions_ShowBoth_A_Down_D_Up;
  procedure uTime_Time_Actions_ShowBoth_A_M_Up_D_M_Down;
  procedure uTime_Time_Actions_ShowBoth_A_M_Down_D_M_Up;
  procedure uTime_Time_Actions_ShowBoth_A_Box_Left_D_Box_Right;
  procedure uTime_Time_Actions_ShowBoth_A_Box_Right_D_Box_Left;

  procedure uTime_Time_Actions_Analog_ShowSecondsIndicator;
  procedure uTIme_Time_Actions_Analog_ShowQuarters;
  procedure uTime_Time_Actions_Analog_ShowHours;

  procedure uTime_Time_Actions_Digital_SetFont(vFont_Family_Name: String);
  procedure uTime_Time_Actions_Digital_SetFontColor(vFont_Color: TAlphaColor; vFont_Color_Name: String);
  procedure uTime_Time_Actions_Digital_SetBackColor(vBack_Color: TAlphaColor; vBack_Color_Name: String);
  procedure uTime_Time_Actions_Digital_SetBackStrokeColor(vBack_Color: TAlphaColor; vBack_Color_Name: String);

implementation
uses
  uLoad_AllTypes,
  uTime_SetAll;

procedure uTime_Time_Actions_Update_Analog;
var
  vActuall_Time: TTime;
  vHour: Word;
  vMinutes: Word;
  vSeconds: Word;
  vMilliseconds: Word;
begin
  vActuall_Time:= now;
  DecodeTime(vActuall_Time, vHour, vMinutes, vSeconds, vMilliseconds);

  vTime.P_Time.Analog_Hour.RotationAngle:= StrToInt(FormatFloat('0', (360* vHour)/ 12));
  vTime.P_Time.Analog_Minutes.RotationAngle:= StrToInt(FormatFloat('0', (360* vMinutes)/ 60));
  vTime.P_Time.Analog_Seconds.RotationAngle:= StrToInt(FormatFloat('0', (360* vSeconds)/ 60));
end;

procedure uTime_Time_Actions_Update_Digital;
var
  vActuall_Time: TTime;
  vHour: Word;
  vMinutes: Word;
  vSeconds: Word;
  vMilliseconds: Word;
begin
  vActuall_Time:= now;
  DecodeTime(vActuall_Time, vHour, vMinutes, vSeconds, vMilliseconds);

  vTime.P_Time.Digital_Hour.Text:= FloatToStr(vHour)+ ':';
  if Length(vTime.P_Time.Digital_Hour.Text)< 3 then
    vTime.P_Time.Digital_Hour.Text:= '0'+ FloatToStr(vHour)+ ':';
  vTime.P_Time.Digital_Minutes.Text:= FloatToStr(vMinutes)+ ':';
  if Length(vTime.P_Time.Digital_Minutes.Text)< 3 then
    vTime.P_Time.Digital_Minutes.Text:= '0'+ FloatToStr(vMinutes)+ ':';
  vTime.P_Time.Digital_Seconds.Text:= FloatToStr(vSeconds);
  if Length(vTime.P_Time.Digital_Seconds.Text)< 2 then
    vTime.P_Time.Digital_Seconds.Text:= '0'+ FloatToStr(vSeconds);
end;

////////////////////////////////////////////////////////////////////////////////
procedure uTime_Time_Actions_ShowType(vType: String);
begin
  if vType= 'Analog' then
    uTime_Time_Actions_ShowAnalog
  else if vType= 'Digital' then
    uTime_Time_Actions_ShowDigital
  else if vType= 'Both' then
    uTime_Time_Actions_ShowBoth;
  addons.time.P_Time.Clock_Type:= vType;
  addons.time.Config_Ini.WriteString('TIME_LOCAL', 'Visible_Type', vType);
end;

procedure uTime_Time_Actions_ShowAnalog;
begin
  vTime.P_Time.Analog_Back.Visible:= True;
  vTime.P_Time.Digital_Back.Visible:= False;
  vTime.P_Time.Config_General_Both_Type_Label.Visible:= False;
  vTime.P_Time.Config_General_Both_Type.Visible:= False;
end;

procedure uTime_Time_Actions_ShowDigital;
begin
  vTime.P_Time.Analog_Back.Visible:= False;
  vTime.P_Time.Digital_Back.Visible:= True;
  vTime.P_Time.Config_General_Both_Type_Label.Visible:= False;
  vTime.P_Time.Config_General_Both_Type.Visible:= False;
end;

procedure uTime_Time_Actions_ShowBoth;
begin
  vTime.P_Time.Analog_Back.Visible:= True;
  vTime.P_Time.Digital_Back.Visible:= True;
  vTime.P_Time.Config_General_Both_Type_Label.Visible:= True;
  vTime.P_Time.Config_General_Both_Type.Visible:= True;
end;

////////////////////////////////////////////////////////////////////////////////
procedure uTime_Time_Actions_ShowBothType(vType: String);
begin
  if vType= 'Default' then
    uTime_Time_Actions_ShowBoth_Default
  else if vType= 'Analog Up-Digital Down' then
    uTime_Time_Actions_ShowBoth_A_Up_D_Down
  else if vType= 'Analog Down-Digital Up' then
    uTime_Time_Actions_ShowBoth_A_Down_D_Up
  else if vType= 'Analog Middle Up-Digital Middle Down' then
    uTime_Time_Actions_ShowBoth_A_M_Up_D_M_Down
  else if vType= 'Analog Middle Down-Digital Middle Up' then
    uTime_Time_Actions_ShowBoth_A_M_Down_D_M_Up
  else if vType= 'Analog Boxed Left-Digital Boxed Right' then
    uTime_Time_Actions_ShowBoth_A_Box_Left_D_Box_Right
  else if vType= 'Analog Boxed Right-Digital Boxed Left' then
    uTime_Time_Actions_ShowBoth_A_Box_Right_D_Box_Left;
end;

procedure uTime_Time_Actions_ShowBoth_Default;
begin
  vTime.P_Time.Analog_Back.Scale.X:= 1;
  vTime.P_Time.Analog_Back.Scale.Y:= 1;

  vTime.P_Time.Analog_Back.Position.X:= (vTime.P_Time.Back.Width/ 2)- 300;
  vTime.P_Time.Analog_Back.Position.Y:= (vTime.P_Time.Back.Height/ 2)- 300;

  vTime.P_Time.Digital_Back.Scale.X:= 1;
  vTime.P_Time.Digital_Back.Scale.Y:= 1;

  vTime.P_Time.Digital_Back.Position.X:= (vTime.P_Time.Back.Width/ 2)- 300;
  vTime.P_Time.Digital_Back.Position.Y:= (vTime.P_Time.Back.Height/ 2)- 80;
end;

procedure uTime_Time_Actions_ShowBoth_A_Up_D_Down;
begin
  vTime.P_Time.Analog_Back.Scale.X:= 1;
  vTime.P_Time.Analog_Back.Scale.Y:= 1;

  vTime.P_Time.Analog_Back.Position.X:= (vTime.P_Time.Back.Width/ 2)- 300;
  vTime.P_Time.Analog_Back.Position.Y:= 30;

  vTime.P_Time.Digital_Back.Scale.X:= 1;
  vTime.P_Time.Digital_Back.Scale.Y:= 1;

  vTime.P_Time.Digital_Back.Position.X:= (vTime.P_Time.Back.Width/ 2)- 300;
  vTime.P_Time.Digital_Back.Position.Y:= vTime.P_Time.Back.Height- (vTime.P_Time.Digital_Back.Height+ 30)
end;

procedure uTime_Time_Actions_ShowBoth_A_Down_D_Up;
begin
  vTime.P_Time.Analog_Back.Scale.X:= 1;
  vTime.P_Time.Analog_Back.Scale.Y:= 1;

  vTime.P_Time.Analog_Back.Position.X:= (vTime.P_Time.Back.Width/ 2)- 300;
  vTime.P_Time.Analog_Back.Position.Y:= vTime.P_Time.Back.Height- (vTime.P_Time.Analog_Back.Height+ 30);

  vTime.P_Time.Digital_Back.Scale.X:= 1;
  vTime.P_Time.Digital_Back.Scale.Y:= 1;

  vTime.P_Time.Digital_Back.Position.X:= (vTime.P_Time.Back.Width/ 2)- 300;
  vTime.P_Time.Digital_Back.Position.Y:= 30;
end;

procedure uTime_Time_Actions_ShowBoth_A_M_Up_D_M_Down;
begin

end;

procedure uTime_Time_Actions_ShowBoth_A_M_Down_D_M_Up;
begin

end;

procedure uTime_Time_Actions_ShowBoth_A_Box_Left_D_Box_Right;
begin

end;

procedure uTime_Time_Actions_ShowBoth_A_Box_Right_D_Box_Left;
begin

end;

////////////////////////////////////////////////////////////////////////////////
//Analog
procedure uTIme_Time_Actions_Analog_ShowQuarters;
var
  vi: integer;
begin
  for vi:= 0 to 3 do
    vTime.P_Time.Analog_Quarters[vi].Visible:= not vTime.P_Time.Analog_Quarters[vi].Visible;
  addons.time.P_Time.Analog_Img_Quarters_Show:= vTime.P_Time.Analog_Quarters[0].Visible;
  addons.time.Config_Ini.WriteBool('TIME_LOCAL', 'Analog_ShowQuarters', addons.time.P_Time.Analog_Img_Quarters_Show);
end;

procedure uTime_Time_Actions_Analog_ShowHours;
var
  vi: integer;
begin
  for vi := 0 to 7 do
    begin
      vTime.P_Time.Analog_Hours[vi].Visible:= not vTime.P_Time.Analog_Hours[vi].Visible;
      addons.time.P_Time.Analog_Img_Hours_Show:= vTime.P_Time.Analog_Hours[0].Visible;
      addons.time.Config_Ini.WriteBool('TIME_LOCAL', 'Analog_ShowHours' ,addons.time.P_Time.Analog_Img_Hours_Show);
    end;
end;

procedure uTime_Time_Actions_Analog_ShowSecondsIndicator;
begin
  vTime.P_Time.Analog_Seconds.Visible:= not vTime.P_Time.Analog_Seconds.Visible;
  addons.time.P_Time.Analog_Seconds_Indicator:= vTime.P_Time.Analog_Seconds.Visible;
  addons.time.Config_Ini.WriteBool('TIME_LOCAL', 'Analog_ShowSecondsIndicator' , addons.time.P_Time.Analog_Seconds_Indicator);
end;

////////////////////////////////////////////////////////////////////////////////
//Digital
procedure uTime_Time_Actions_Digital_SetFont(vFont_Family_Name: String);
begin
  if vFont_Family_Name<> 'Choose a font...' then
    begin
      vTime.P_Time.Digital_Hour.Font.Family:= vFont_Family_Name;
      vTime.P_Time.Digital_Minutes.Font.Family:= vFont_Family_Name;
      vTime.P_Time.Digital_Seconds.Font.Family:= vFont_Family_Name;

      addons.time.P_Time.Digital_Font:= vFont_Family_Name;
      addons.time.Config_Ini.WriteString('TIME_LOCAL', 'Digital_Font' , vFont_Family_Name);
    end;
end;

procedure uTime_Time_Actions_Digital_SetFontColor(vFont_Color: TAlphaColor; vFont_Color_Name: String);
begin
  vTime.P_Time.Digital_Hour.TextSettings.FontColor:= vFont_Color;
  vTime.P_Time.Digital_Minutes.TextSettings.FontColor:= vFont_Color;
  vTime.P_Time.Digital_Seconds.TextSettings.FontColor:= vFont_Color;
  addons.time.P_Time.Digital_Color:= vFont_Color_Name;
  addons.time.Config_Ini.WriteString('TIME_LOCAL', 'Digital_Color', vFont_Color_Name);
end;

procedure uTime_Time_Actions_Digital_SetBackColor(vBack_Color: TAlphaColor; vBack_Color_Name: String);
begin
  vTime.P_Time.Digital_Rect.Fill.Color:= vBack_Color;
  addons.time.P_Time.Digital_Color_Back:= vBack_Color_Name;
  addons.time.Config_Ini.WriteString('TIME_LOCAL', 'Digital_Color_Back', vBack_Color_Name);
end;

procedure uTime_Time_Actions_Digital_SetBackStrokeColor(vBack_Color: TAlphaColor; vBack_Color_Name: String);
begin
  vTime.P_Time.Digital_Rect.Stroke.Color:= vBack_Color;
  addons.time.P_Time.Digital_Color_Back_Stroke:= vBack_Color_Name;
  addons.time.Config_Ini.WriteString('TIME_LOCAL', 'Digital_Color_Back_Stroke', vBack_Color_Name);
end;

end.
