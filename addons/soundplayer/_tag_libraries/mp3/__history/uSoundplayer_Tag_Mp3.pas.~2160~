unit uSoundplayer_Tag_Mp3;

interface

uses
  System.Classes,
  System.SysUtils,
  System.UiTypes,
  FMX.Dialogs,
  FMX.Graphics,
  FMX.StdCtrls,
  ID3v1Library,
  ID3v2Library,
  Bass;

procedure Get(vPath: String; vSongNum: Integer);
procedure Get_ID3v1(vPath: String);
procedure Set_Tag_ID3v1(vPath: String);
procedure Get_ID3v2(vPath: String);
procedure Set_Tag_ID3v2(vPath: String);
procedure Save;

// Check Difference between ID3v1 to ID3v2
procedure Transfer(vInto: String);

// Covers ID3v2
procedure Cover_SetArrows;
procedure Cover_Previous;
procedure Cover_Next;
procedure Cover_Select;
procedure Cover_Select_Cancel;
procedure Cover_SetFromComputer(vSelection: Integer);
procedure Cover_Remove;
function Cover_Get_Image(out vDesk: String; out vImage: TBitmap): Boolean;

// Lyrics ID3v2
procedure Lyrics_Add;
procedure Lyrics_Add_Cancel;
procedure Lyrics_Load;
procedure Lyrics_Delete;
procedure Lyrics_Get_Add;
procedure Lyrics_Get_Cancel;

// Rating System
procedure Rating_Set;
procedure Rating_Save;
procedure Rating_Stars(vStar: Integer; vLeave: Boolean);
procedure Rating_Select_Stars(vStarNum: Byte);
procedure Rating_RemoveAll_Stars;
function Rating_Get: Byte;

var
  vCurrentSongPath: String;
  vCurrentSongNum: Integer;
  CurrentAPICIndex: Integer;
  APICIndex: Integer;
  vLyricsList: Tstringlist;

implementation

uses
  uLoad_AllTypes,
  uSoundplayer_SetAll,
  uSoundplayer_AllTypes,
  uSoundplayer_Tag_Mp3_SetAll,
  uSoundplayer_Player;

procedure Get(vPath: String; vSongNum: Integer);
begin
  vCurrentSongPath := vPath;
  vCurrentSongNum := vSongNum;
  Set_Tag_ID3v1(vPath);
  Set_Tag_ID3v2(vPath);
end;

procedure Get_ID3v1(vPath: String);
begin
  soundplayer.player_actions.Tag.mp3.ID3v1 := TID3v1Tag.Create;

  soundplayer.player_actions.Tag.mp3.TagError := soundplayer.player_actions.Tag.mp3.ID3v1.LoadFromFile(vPath);
  if soundplayer.player_actions.Tag.mp3.TagError <> ID3V1LIBRARY_SUCCESS then
  begin
    // Show a message error
    // Get major and minor version num of mp3
  end;

  soundplayer.player_actions.Tag.mp3.ID3v1.Loaded := True;
end;

procedure Set_Tag_ID3v1(vPath: String);
begin
  Get_ID3v1(vPath);

  vSoundplayer.Tag.mp3.ID3v1.Title_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Title;
  vSoundplayer.Tag.mp3.ID3v1.Artist_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Artist;
  vSoundplayer.Tag.mp3.ID3v1.Album_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Album;
  vSoundplayer.Tag.mp3.ID3v1.Year_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Year;
  vSoundplayer.Tag.mp3.ID3v1.Genre_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Genre;
  vSoundplayer.Tag.mp3.ID3v1.Track_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Track.ToString;
  vSoundplayer.Tag.mp3.ID3v1.Comment_V.Text := soundplayer.player_actions.Tag.mp3.ID3v1.Comment;

  soundplayer.player_actions.Tag.mp3.ID3v1.Free;
end;

procedure Get_ID3v2(vPath: String);
var
  vi: Integer;
  vDescription: String;
  vImage: TBitmap;
begin
  soundplayer.player_actions.Tag.mp3.ID3v2 := TID3v2Tag.Create;

  soundplayer.player_actions.Tag.mp3.TagError := soundplayer.player_actions.Tag.mp3.ID3v2.LoadFromFile(vPath);
  if soundplayer.player_actions.Tag.mp3.TagError <> ID3V2LIBRARY_SUCCESS then
  begin
    // Show an error message
    // Get major and minor version num of mp3
  end;
  soundplayer.player_actions.Tag.mp3.ID3v2.RemoveUnsynchronisationOnAllFrames;
  soundplayer.player_actions.Tag.mp3.ID3v2.ExtendedHeader := True;
  soundplayer.player_actions.Tag.mp3.ID3v2.ExtendedHeader3.CRCPresent := True;

  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Title := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TIT2');
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Artist := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TPE1');
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Album := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TALB');
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Year := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TYER');
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Genre := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TCON');
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Track := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TRCK');
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Lyrics := Tstringlist.Create;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Lyrics.Add(soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeLyrics('USLT',
    soundplayer.player_actions.Tag.mp3.Lyrics_LanguageID, soundplayer.player_actions.Tag.mp3.Lyrics_Description));

  vi := 1;
  if Cover_Get_Image(vDescription, vImage) then
  begin
    SetLength(soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Covers, vi);
    SetLength(soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Cover_Description, vi);
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Covers[vi] := vImage;
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Cover_Description[vi] := vDescription;

    inc(vi);
  end;

  soundplayer.player_actions.Tag.mp3.Info_ID3v2.Song.Rating := Rating_Get;

  soundplayer.player_actions.Tag.mp3.ID3v2.Free;

  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.Filename := soundplayer.player_actions.Tag.mp3.ID3v2.Filename;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.Loaded := soundplayer.player_actions.Tag.mp3.ID3v2.Loaded;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.MajorVersion := soundplayer.player_actions.Tag.mp3.ID3v2.MajorVersion;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.MinorVersion := soundplayer.player_actions.Tag.mp3.ID3v2.MinorVersion;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.Size := soundplayer.player_actions.Tag.mp3.ID3v2.Size;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.FramesCount := soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.BitRate := soundplayer.player_actions.Tag.mp3.ID3v2.BitRate;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.CoverArtCount := soundplayer.player_actions.Tag.mp3.ID3v2.CoverArtCount;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.PlayTime := soundplayer.player_actions.Tag.mp3.ID3v2.PlayTime;

  soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.FrameSize := soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.FrameSize;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.SampleRate := soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.SampleRate;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.BitRate := soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.BitRate;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Padding := soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Padding;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Copyrighted := soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Copyrighted;
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Quality := soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Quality;
  if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ChannelMode = TMPEGChannelMode.tmpegcmUnknown then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ChannelMode := 'Unknown Type'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ChannelMode = TMPEGChannelMode.tmpegcmMono then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ChannelMode := 'Mono'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ChannelMode = TMPEGChannelMode.tmpegcmDualChannel then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ChannelMode := 'Dual'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ChannelMode = TMPEGChannelMode.tmpegcmJointStereo then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ChannelMode := 'Joint'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ChannelMode = TMPEGChannelMode.tmpegcmStereo then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ChannelMode := 'Stereo';
  if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Layer = TMPEGLayer.tmpeglUnknown then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Layer := 'Unknown Type'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Layer = TMPEGLayer.tmpegl1 then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Layer := 'Mpeg Layer 1'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Layer = TMPEGLayer.tmpegl2 then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Layer := 'Mpeg Layer 2'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.Layer = TMPEGLayer.tmpegl3 then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.Layer := 'Mpeg Layer 3';
  if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ModeExtension = TMPEGModeExtension.tmpegmeUnknown then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ExtensionMode := 'Unknown Type'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ModeExtension = TMPEGModeExtension.tmpegmeNone then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ExtensionMode := 'None'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ModeExtension = TMPEGModeExtension.tmpegmeIntensity then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ExtensionMode := 'Intensity'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ModeExtension = TMPEGModeExtension.tmpegmeMS then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ExtensionMode := 'meMs'
  else if soundplayer.player_actions.Tag.mp3.ID3v2.MPEGInfo.ModeExtension = TMPEGModeExtension.tmpegmeIntensityMS then
    soundplayer.player_actions.Tag.mp3.Info_ID3v2.MPEG.ExtensionMode := 'IntensityMS';


  // Implentamentions of Wav, Aiff, DS, DFF variables that not needed for mpeg
  // But must keep it for future use
  { soundplayer.player_actions.Tag.Info.WAV.FmtSize :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.FmtSize;
    soundplayer.player_actions.Tag.Info.WAV.FormatTag :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.FormatTag;
    soundplayer.player_actions.Tag.Info.WAV.Channels :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.Channels;
    soundplayer.player_actions.Tag.Info.WAV.AvgBytesPerSec :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.AvgBytesPerSec;
    soundplayer.player_actions.Tag.Info.WAV.BlockAlign :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.BlockAlign;
    soundplayer.player_actions.Tag.Info.WAV.BitsPerSamples :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.BitsPerSample;
    soundplayer.player_actions.Tag.Info.WAV.CbSize := soundplayer.player_actions.Tag.ID3v2.WAVInfo.CbSize;
    soundplayer.player_actions.Tag.Info.WAV.ChannelMask :=
    soundplayer.player_actions.Tag.ID3v2.WAVInfo.ChannelMask;

    soundplayer.player_actions.Tag.Info.AIFF.Channels :=
    soundplayer.player_actions.Tag.ID3v2.AIFFInfo.Channels;
    soundplayer.player_actions.Tag.Info.AIFF.SampleFrames :=
    soundplayer.player_actions.Tag.ID3v2.AIFFInfo.SampleFrames;
    soundplayer.player_actions.Tag.Info.AIFF.SampleSize :=
    soundplayer.player_actions.Tag.ID3v2.AIFFInfo.SampleSize;
    soundplayer.player_actions.Tag.Info.AIFF.SampleRate :=
    soundplayer.player_actions.Tag.ID3v2.AIFFInfo.SampleRate;
    soundplayer.player_actions.Tag.Info.AIFF.CompressionID :=
    soundplayer.player_actions.Tag.ID3v2.AIFFInfo.CompressionID;
    soundplayer.player_actions.Tag.Info.AIFF.Compression :=
    soundplayer.player_actions.Tag.ID3v2.AIFFInfo.Compression;

    soundplayer.player_actions.Tag.Info.DS.FormatVersion :=
    soundplayer.player_actions.Tag.ID3v2.DSFInfo.FormatVersion;
    soundplayer.player_actions.Tag.Info.DS.FormatID :=
    soundplayer.player_actions.Tag.ID3v2.DSFInfo.FormatID;
    soundplayer.player_actions.Tag.Info.DS.SamplingFrequency :=
    soundplayer.player_actions.Tag.ID3v2.DSFInfo.SamplingFrequency;
    soundplayer.player_actions.Tag.Info.DS.SampleCount :=
    soundplayer.player_actions.Tag.ID3v2.DSFInfo.SampleCount;
    if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfctUnknown then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Unknown Type'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfctMono then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Mono'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfctStereo then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Stereo'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfct3Channels then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Three Channels'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfctQuad then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Quad Sound System'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfct4Channels then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Four Channels'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfct5Channels then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Five Channels'
    else if soundplayer.player_actions.Tag.ID3v2.DSFInfo.ChannelType = TDSFChannelType.dsfct51Channels then
    soundplayer.player_actions.Tag.Info.DS.ChannelType := 'Five Channels Plus One';
    soundplayer.player_actions.Tag.Info.DS.BlockSizePerChannel :=
    soundplayer.player_actions.Tag.ID3v2.DSFInfo.BlockSizePerChannel;

    soundplayer.player_actions.Tag.Info.DFF.FormatVersion :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.FormatVersion;
    soundplayer.player_actions.Tag.Info.DFF.SampleRate :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.SampleRate;
    soundplayer.player_actions.Tag.Info.DFF.ChannelNumber :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.ChannelNumber;
    soundplayer.player_actions.Tag.Info.DFF.CompressionName :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.CompressionName;
    soundplayer.player_actions.Tag.Info.DFF.SampleCount :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.SampleCount;
    soundplayer.player_actions.Tag.Info.DFF.PlayTime :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.PlayTime;
    soundplayer.player_actions.Tag.Info.DFF.BitRate :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.BitRate;
    soundplayer.player_actions.Tag.Info.DFF.SoundDateLenght :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.SoundDataLength;
    soundplayer.player_actions.Tag.Info.DFF.DSTFramesCount :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.DSTFramesCount;
    soundplayer.player_actions.Tag.Info.DFF.DSTFramesRate :=
    soundplayer.player_actions.Tag.ID3v2.DFFInfo.DSTFramesRate;
    soundplayer.player_actions.Tag.Info.DFF.Ratio := soundplayer.player_actions.Tag.ID3v2.DFFInfo.Ratio; }

  soundplayer.player_actions.Tag.mp3.ID3v2.Loaded := True;
end;

procedure Set_Tag_ID3v2(vPath: String);
var
  vDescription: String;
  vImage: TBitmap;
  vTextFile: TextFile;
  vString: String;

begin
  Get_ID3v2(vPath);
  vSoundplayer.Tag.mp3.ID3v2.Title_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TIT2');
  vSoundplayer.Tag.mp3.ID3v2.Artist_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TPE1');
  vSoundplayer.Tag.mp3.ID3v2.Album_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TALB');
  vSoundplayer.Tag.mp3.ID3v2.Year_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TYER');
  vSoundplayer.Tag.mp3.ID3v2.Genre_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TCON');
  vSoundplayer.Tag.mp3.ID3v2.Track_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeText('TRCK');
  vSoundplayer.Tag.mp3.ID3v2.Comment_V.Text := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeComment('TCOMM',
    soundplayer.player_actions.Tag.mp3.Lyrics_LanguageID, soundplayer.player_actions.Tag.mp3.Lyrics_Description);

  soundplayer.player_actions.Tag.mp3.Lyrics := Tstringlist.Create;
  soundplayer.player_actions.Tag.mp3.Lyrics.Add(soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeLyrics('USLT',
    soundplayer.player_actions.Tag.mp3.Lyrics_LanguageID, soundplayer.player_actions.Tag.mp3.Lyrics_Description));
  soundplayer.player_actions.Tag.mp3.Lyrics.SaveToFile(addons.soundplayer.Path.Files + 'templyric.txt');
  soundplayer.player_actions.Tag.mp3.Lyrics.Clear;

  AssignFile(vTextFile, addons.soundplayer.Path.Files + 'templyric.txt');
  Reset(vTextFile);
  while Not EOF(vTextFile) do
  begin
    Readln(vTextFile, vString);
    soundplayer.player_actions.Tag.mp3.Lyrics.Add(vString);
  end;
  CloseFile(vTextFile);
  DeleteFile(addons.soundplayer.Path.Files + 'templyric.txt');

  vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.Clear;
  vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.AddStrings(soundplayer.player_actions.Tag.mp3.Lyrics);

  if vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.Count - 1 > 1 then
    vSoundplayer.Tag.mp3.ID3v2.Lyrics_Remove.TextSettings.FontColor := TAlphaColorRec.Red
  else
    vSoundplayer.Tag.mp3.ID3v2.Lyrics_Remove.TextSettings.FontColor := TAlphaColorRec.Grey;

  // Count lines in one line with #10#13 seperators
  // vMemoChars: Integer;
  // vMemoChars := Length(StringReplace(StringReplace(vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Text, #10, '', [rfReplaceAll]), #13, '', [rfReplaceAll]));

  if soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.CoverArtCount = 0 then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowRight.TextSettings.FontColor := TAlphaColorRec.Grey;
    vSoundplayer.Tag.mp3.ID3v2.Cover_Remove.TextSettings.FontColor := TAlphaColorRec.Grey;
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowLeft.TextSettings.FontColor := TAlphaColorRec.Grey;
  end;

  // Cover Related
  APICIndex := 0;

  Cover_SetArrows;
  if Cover_Get_Image(vDescription, vImage) then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Cover_Label.Text := vDescription;
    vSoundplayer.Tag.mp3.ID3v2.Cover.Bitmap := vImage;
  end;

  Rating_Set;
  soundplayer.player_actions.Tag.mp3.ID3v2.Free;
end;

function Cover_Get_Image(out vDesk: String; out vImage: TBitmap): Boolean;
var
  PictureType: Integer;
  PictureStream: TStream;
  Success: Boolean;
  MIMEType: String;
  Description: String;
  vi: Integer;
begin
  Result := False;
  try
    PictureStream := TMemoryStream.Create;
    try
      for vi := APICIndex to soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount - 1 do
      begin
        if IsSameFrameID(soundplayer.player_actions.Tag.mp3.ID3v2.Frames[vi].ID, 'APIC') then
        begin
          Success := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeCoverPictureStream(vi, PictureStream, MIMEType, Description, PictureType);
          if (PictureStream.Size <> 0) OR Success then
            Break;
        end;
      end;

      if PictureType in [0, 3, 4, 6, 20] then
      begin
        case PictureType of
          0:
            vDesk := 'Other';
          3:
            vDesk := 'Front Cover';
          4:
            vDesk := 'Back Cover';
          6:
            vDesk := 'CD Cover';
          20:
            vDesk := 'Company Logo';
        end;
      end;
      vImage := TBitmap.Create;
      vImage.LoadFromStream(PictureStream);

      Result := True;
      APICIndex := vi;
    finally
      PictureStream.Free;
    end;
  except
    // *
  end;
end;

procedure Transfer(vInto: String);
begin
  if vInto = 'to_2' then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Title_V.Text := vSoundplayer.Tag.mp3.ID3v1.Title_V.Text;
    vSoundplayer.Tag.mp3.ID3v2.Artist_V.Text := vSoundplayer.Tag.mp3.ID3v1.Artist_V.Text;
    vSoundplayer.Tag.mp3.ID3v2.Album_V.Text := vSoundplayer.Tag.mp3.ID3v1.Album_V.Text;
    vSoundplayer.Tag.mp3.ID3v2.Year_V.Text := vSoundplayer.Tag.mp3.ID3v1.Year_V.Text;
    vSoundplayer.Tag.mp3.ID3v2.Genre_V.Text := vSoundplayer.Tag.mp3.ID3v1.Genre_V.Text;
    vSoundplayer.Tag.mp3.ID3v2.Track_V.Text := vSoundplayer.Tag.mp3.ID3v1.Track_V.Text;
    vSoundplayer.Tag.mp3.ID3v2.Comment_V.Text := vSoundplayer.Tag.mp3.ID3v1.Comment_V.Text;
    vSoundplayer.Tag.mp3.TabControl.TabIndex := 1;
  end
  else if vInto = 'to_1' then
  begin
    vSoundplayer.Tag.mp3.ID3v1.Title_V.Text := vSoundplayer.Tag.mp3.ID3v2.Title_V.Text;
    vSoundplayer.Tag.mp3.ID3v1.Artist_V.Text := vSoundplayer.Tag.mp3.ID3v2.Artist_V.Text;
    vSoundplayer.Tag.mp3.ID3v1.Album_V.Text := vSoundplayer.Tag.mp3.ID3v2.Album_V.Text;
    vSoundplayer.Tag.mp3.ID3v1.Year_V.Text := vSoundplayer.Tag.mp3.ID3v2.Year_V.Text;
    vSoundplayer.Tag.mp3.ID3v1.Genre_V.Text := vSoundplayer.Tag.mp3.ID3v2.Genre_V.Text;
    vSoundplayer.Tag.mp3.ID3v1.Track_V.Text := vSoundplayer.Tag.mp3.ID3v2.Track_V.Text;
    vSoundplayer.Tag.mp3.ID3v1.Comment_V.Text := vSoundplayer.Tag.mp3.ID3v2.Comment_V.Text;
    vSoundplayer.Tag.mp3.TabControl.TabIndex := 0;
  end;
end;

///

procedure Cover_SetArrows;
begin
  if soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.CoverArtCount > 1 then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowLeft.TextSettings.FontColor := TAlphaColorRec.Deepskyblue;
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowRight.TextSettings.FontColor := TAlphaColorRec.Deepskyblue;
  end
  else
  begin
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowLeft.TextSettings.FontColor := TAlphaColorRec.Grey;
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowRight.TextSettings.FontColor := TAlphaColorRec.Grey;
  end;
end;

procedure Cover_Previous;
var
  i: Integer;
  vDescription: String;
  vImage: TBitmap;
begin
  Get_ID3v2(soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.Filename);
  for i := 0 to soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount - 1 do
  begin
    if IsSameFrameID(soundplayer.player_actions.Tag.mp3.ID3v2.Frames[i].ID, 'APIC') then
    begin
      if i < APICIndex then
      begin
        APICIndex := i;
        if Cover_Get_Image(vDescription, vImage) then
        begin
          vSoundplayer.Tag.mp3.ID3v2.Cover_Label.Text := vDescription;
          vSoundplayer.Tag.mp3.ID3v2.Cover.Bitmap := vImage;
        end;
        Break;
      end;
    end;
  end;

end;

procedure Cover_Next;
var
  i: Integer;
  vDescription: String;
  vImage: TBitmap;
begin
  Get_ID3v2(soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.Filename);
  for i := 0 to soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount - 1 do
  begin
    if IsSameFrameID(soundplayer.player_actions.Tag.mp3.ID3v2.Frames[i].ID, 'APIC') then
    begin
      if i > CurrentAPICIndex then
      begin
        APICIndex := i;
        if Cover_Get_Image(vDescription, vImage) then
        begin
          vSoundplayer.Tag.mp3.ID3v2.Cover_Label.Text := vDescription;
          vSoundplayer.Tag.mp3.ID3v2.Cover.Bitmap := vImage;
        end;
        Break;
      end;
    end;
  end;
end;

procedure Cover_Select;
begin
  if vSoundplayer.scene.OpenDialog.Filename <> '' then
  begin
    extrafe.prog.State := 'addon_soundplayer_tag_mp3_cover_select';
    uSoundplayer_Tag_Mp3_SetAll.SelectCover;
  end;
end;

procedure Cover_Select_Cancel;
begin
  extrafe.prog.State := 'addon_soundplayer_tag_mp3';
  vSoundplayer.Tag.mp3.Back_Blur.Enabled := False;
  vSoundplayer.Tag.mp3.TabControl.Enabled := True;
  FreeAndNil(vSoundplayer.Tag.mp3.Cover_Select.Panel);
end;

procedure Cover_SetFromComputer(vSelection: Integer);
var
  Fext: String;
  MIMEType: String;
  FrameIndex: Integer;
  Description: String;
  PictureType: Integer;
  Success: Boolean;
  vi: Integer;
  PictureStream: TStream;
  vFoundAPIC_PictureType: Boolean;
begin
  vFoundAPIC_PictureType := False;
  case vSelection of
    0:
      begin
        vSelection := 3;
        Description := 'Front Cover';
      end;
    1:
      begin
        vSelection := 4;
        Description := 'Back Cover';
      end;
    2:
      begin
        vSelection := 6;
        Description := 'CD Cover';
      end;
    3:
      begin
        vSelection := 20;
        Description := 'Company Logo';
      end;
    4:
      begin
        vSelection := 0;
        Description := 'Other';
      end;
  end;

  PictureStream := TMemoryStream.Create;

  for vi := soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount - 1 downto 0 do
  begin
    if IsSameFrameID(soundplayer.player_actions.Tag.mp3.ID3v2.Frames[vi].ID, 'APIC') then
    begin
      Success := soundplayer.player_actions.Tag.mp3.ID3v2.GetUnicodeCoverPictureStream(vi, PictureStream, MIMEType, Description, PictureType);
      if vSelection = PictureType then
      begin
        soundplayer.player_actions.Tag.mp3.ID3v2.DeleteFrame(vi);
      end;
    end;
  end;

  PictureStream.Free;

  Fext := UpperCase(ExtractFileExt(vSoundplayer.scene.OpenDialog.Filename));
  if (Fext = '.JPG') or (Fext = '.JPEG') then
  begin
    MIMEType := 'image/jpeg';
  end;
  if (Fext = '.PNG') then
  begin
    MIMEType := 'image/png';
  end;
  if (Fext = '.BMP') then
  begin
    MIMEType := 'image/bmp';
  end;
  if (Fext = '.GIF') then
  begin
    MIMEType := 'image/gif';
  end;

  PictureType := vSelection;

  FrameIndex := soundplayer.player_actions.Tag.mp3.ID3v2.AddFrame('APIC');

  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeCoverPictureFromFile(FrameIndex, Description, vSoundplayer.scene.OpenDialog.Filename, MIMEType,
    PictureType);
  vSoundplayer.Tag.mp3.ID3v2.Cover.Bitmap.LoadFromFile(vSoundplayer.scene.OpenDialog.Filename);
  vSoundplayer.Info.Cover.Bitmap.LoadFromFile(vSoundplayer.scene.OpenDialog.Filename);

  vSoundplayer.Tag.mp3.ID3v2.Cover_Label.Text := Description;

  vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowLeft.TextSettings.FontColor := TAlphaColorRec.Deepskyblue;
  vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowRight.TextSettings.FontColor := TAlphaColorRec.Deepskyblue;
  vSoundplayer.Tag.mp3.ID3v2.Cover_Remove.TextSettings.FontColor := TAlphaColorRec.Red;

  Cover_Select_Cancel;
end;

procedure Cover_Remove;
var
  vDescription: String;
  vImage: TBitmap;
begin
  vSoundplayer.Tag.mp3.ID3v2.Cover.Bitmap := nil;
  soundplayer.player_actions.Tag.mp3.ID3v2.DeleteFrame(CurrentAPICIndex);
  soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.CoverArtCount := soundplayer.player_actions.Tag.mp3.ID3v2.CoverArtCount;
  if soundplayer.player_actions.Tag.mp3.Info_ID3v2.General.CoverArtCount = 0 then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowLeft.TextSettings.FontColor := TAlphaColorRec.Grey;
    vSoundplayer.Tag.mp3.ID3v2.Cover_ArrowRight.TextSettings.FontColor := TAlphaColorRec.Grey;
    vSoundplayer.Tag.mp3.ID3v2.Cover_Remove_Glow.Enabled := False;
    vSoundplayer.Tag.mp3.ID3v2.Cover_Remove.TextSettings.FontColor := TAlphaColorRec.Grey;
    vSoundplayer.Tag.mp3.ID3v2.Cover_Label.Text := '';
  end
  else
  begin
    APICIndex := 0;
    if Cover_Get_Image(vDescription, vImage) then
    begin
      vSoundplayer.Tag.mp3.ID3v2.Cover_Label.Text := vDescription;
      vSoundplayer.Tag.mp3.ID3v2.Cover.Bitmap := vImage;
    end;
  end;
end;

///
procedure Lyrics_Add;
var
  vTextFile: TextFile;
  vText: String;
begin
  if vSoundplayer.scene.OpenDialog.Filename <> '' then
  begin
    vLyricsList := Tstringlist.Create;

    AssignFile(vTextFile, vSoundplayer.scene.OpenDialog.Filename);
    Reset(vTextFile);
    while not EOF(vTextFile) do
    begin
      Readln(vTextFile, vText);
      vLyricsList.Add(vText);
    end;
    CloseFile(vTextFile);

    if vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.GetText = '' then
    begin
      vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.Clear;
      vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.AddStrings(vLyricsList);
    end
    else
    begin
      extrafe.prog.State := 'addon_soundplayer_tag_mp3_Lyrics_Add';
      uSoundplayer_Tag_Mp3_SetAll.Lyrics_Add;
    end;
  end;
end;

procedure Lyrics_Load;
begin
  if vSoundplayer.Tag.mp3.Lyrics_Add.Radio_Above.IsChecked then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.AddStrings(vLyricsList);
  end
  else if vSoundplayer.Tag.mp3.Lyrics_Add.Radio_Clear.IsChecked then
  begin
    vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.Clear;
    vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.AddStrings(vLyricsList);
  end;
  Lyrics_Add_Cancel;
end;

procedure Lyrics_Add_Cancel;
begin
  extrafe.prog.State := 'addon_soundplayer_tag_mp3';
  vSoundplayer.Tag.mp3.Back_Blur.Enabled := False;
  vSoundplayer.Tag.mp3.TabControl.Enabled := True;
  FreeAndNil(vSoundplayer.Tag.mp3.Lyrics_Add.Panel);
end;

procedure Lyrics_Get_Add;
begin
  vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines := vSoundplayer.Tag.mp3.Lyrics_Int.Lyrics_Box.Lines;
  Lyrics_Get_Cancel;
end;

procedure Lyrics_Get_Cancel;
begin
  extrafe.prog.State := 'addon_soundplayer_tag_mp3';
  vSoundplayer.Tag.mp3.Back_Blur.Enabled := False;
  vSoundplayer.Tag.mp3.TabControl.Enabled := True;
  FreeAndNil(vSoundplayer.Tag.mp3.Lyrics_Int.Panel);
end;

procedure Lyrics_Delete;
begin
  vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Lines.Clear;
end;

///
procedure Save;
var
  vGetSongPosition: Integer;
  vi, vk: Integer;
begin
  if addons.soundplayer.Playlist.List.Songs.Strings[soundplayer.player_actions.Playing_Now] = vCurrentSongPath then
  begin
    vGetSongPosition := BASS_ChannelGetPosition(sound.str_music[1], BASS_POS_BYTE);
    BASS_ChannelStop(sound.str_music[1]);
    BASS_StreamFree(sound.str_music[1]);
  end;

  Get_ID3v1(vCurrentSongPath);

  soundplayer.player_actions.Tag.mp3.ID3v1.Title := vSoundplayer.Tag.mp3.ID3v1.Title_V.Text;
  soundplayer.player_actions.Tag.mp3.ID3v1.Artist := vSoundplayer.Tag.mp3.ID3v1.Artist_V.Text;
  soundplayer.player_actions.Tag.mp3.ID3v1.Album := vSoundplayer.Tag.mp3.ID3v1.Album_V.Text;
  soundplayer.player_actions.Tag.mp3.ID3v1.Year := vSoundplayer.Tag.mp3.ID3v1.Year_V.Text;
  soundplayer.player_actions.Tag.mp3.ID3v1.Genre := vSoundplayer.Tag.mp3.ID3v1.Genre_V.Text;
  soundplayer.player_actions.Tag.mp3.ID3v1.Track := vSoundplayer.Tag.mp3.ID3v1.Track_V.Text.ToInteger;
  soundplayer.player_actions.Tag.mp3.ID3v1.Comment := vSoundplayer.Tag.mp3.ID3v1.Comment_V.Text;

  soundplayer.player_actions.Tag.mp3.ID3v1.SaveToFile(vCurrentSongPath);

  soundplayer.player_actions.Tag.mp3.ID3v1.Free;

  Get_ID3v2(vCurrentSongPath);

  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeText('TIT2', vSoundplayer.Tag.mp3.ID3v2.Title_V.Text);
  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeText('TPE1', vSoundplayer.Tag.mp3.ID3v2.Artist_V.Text);
  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeText('TALB', vSoundplayer.Tag.mp3.ID3v2.Album_V.Text);
  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeText('TYER', vSoundplayer.Tag.mp3.ID3v2.Year_V.Text);
  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeText('TCON', vSoundplayer.Tag.mp3.ID3v2.Genre_V.Text);
  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeText('TRCK', vSoundplayer.Tag.mp3.ID3v2.Track_V.Text);
  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeComment('TCOMM', vSoundplayer.Tag.mp3.ID3v2.Comment_V.Text,
    soundplayer.player_actions.Tag.mp3.Lyrics_LanguageID, '');

  soundplayer.player_actions.Tag.mp3.ID3v2.SetUnicodeLyrics('USLT', vSoundplayer.Tag.mp3.ID3v2.Lyrics_Memo.Text,
    soundplayer.player_actions.Tag.mp3.Lyrics_LanguageID, soundplayer.player_actions.Tag.mp3.Lyrics_Description);

  Rating_Save;

  soundplayer.player_actions.Tag.mp3.TagError := soundplayer.player_actions.Tag.mp3.ID3v2.SaveToFile(vCurrentSongPath);

  soundplayer.player_actions.Tag.mp3.ID3v2.Unsynchronised := False;

  if soundplayer.player_actions.Tag.mp3.TagError <> ID3V2LIBRARY_SUCCESS then
  begin
    Showmessage('Error saving ID3v2 tag, error code: ' + IntToStr(soundplayer.player_actions.Tag.mp3.TagError) + #13#10 +
      ID3v2TagErrorCode2String(soundplayer.player_actions.Tag.mp3.TagError));
  end;

  // Save it to songs info
  // Title
  if vSoundplayer.Tag.mp3.ID3v2.Title_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Title := vSoundplayer.Tag.mp3.ID3v1.Title_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Title := vSoundplayer.Tag.mp3.ID3v2.Title_V.Text;
  // Artist
  if vSoundplayer.Tag.mp3.ID3v2.Artist_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Artist := vSoundplayer.Tag.mp3.ID3v1.Artist_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Artist := vSoundplayer.Tag.mp3.ID3v2.Artist_V.Text;
  // Album
  if vSoundplayer.Tag.mp3.ID3v2.Album_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Album := vSoundplayer.Tag.mp3.ID3v1.Album_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Album := vSoundplayer.Tag.mp3.ID3v2.Album_V.Text;
  // Year
  if vSoundplayer.Tag.mp3.ID3v2.Year_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Year := vSoundplayer.Tag.mp3.ID3v1.Year_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Year := vSoundplayer.Tag.mp3.ID3v2.Year_V.Text;
  // Genre
  if vSoundplayer.Tag.mp3.ID3v2.Genre_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Genre := vSoundplayer.Tag.mp3.ID3v1.Genre_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Genre := vSoundplayer.Tag.mp3.ID3v2.Genre_V.Text;
  // Track
  if vSoundplayer.Tag.mp3.ID3v2.Track_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Track := vSoundplayer.Tag.mp3.ID3v1.Track_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Track := vSoundplayer.Tag.mp3.ID3v2.Track_V.Text;
  // Comments
  if vSoundplayer.Tag.mp3.ID3v2.Comment_V.Text = '' then
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Comment := vSoundplayer.Tag.mp3.ID3v1.Comment_V.Text
  else
    addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Comment := vSoundplayer.Tag.mp3.ID3v2.Comment_V.Text;
  // Rating
  addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Rate := soundplayer.player_actions.Tag.mp3.Rating.ToString;
  if addons.soundplayer.Playlist.List.Songs.Strings[soundplayer.player_actions.Playing_Now] = vCurrentSongPath then
  begin
    vk := 0;
    vSoundplayer.Tag.mp3.ID3v2.Rate_Label.Text := 'Rating : Not Rating';
    for vi := 0 to 4 do
    begin
      vSoundplayer.Player.Rate[vi].Text := #$e9d7;
      vSoundplayer.Player.Rate[vi].Visible := True;
    end;
    if addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Rate > IntToStr(0) then
    begin
      for vi := 0 to (addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Rate.ToInteger) - 1 do
      begin
        if not Odd(vi) then
          vSoundplayer.Player.Rate[vk].Text := #$e9d8
        else
        begin
          vSoundplayer.Player.Rate[vk].Text := #$e9d9;
          inc(vk, 1);
        end;
      end;
      vSoundplayer.Tag.mp3.ID3v2.Rate_Label.Text := 'Rating : ' + addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Rate + '/10';
    end;
  end;
  addons.soundplayer.Playlist.List.Song_Info[vCurrentSongNum].Rate := Rating_Get.ToString;
  soundplayer.player_actions.Tag.mp3.ID3v2.Free;

  if addons.soundplayer.Playlist.List.Songs.Strings[soundplayer.player_actions.Playing_Now] = vCurrentSongPath then
  begin
    sound.str_music[1] := BASS_StreamCreateFile(False, PChar(addons.soundplayer.Playlist.List.Songs.Strings[soundplayer.player_actions.Playing_Now]), 0, 0,
      BASS_SAMPLE_FLOAT {$IFDEF UNICODE} or BASS_UNICODE {$ENDIF});
    if soundplayer.Player = sPlay then
    begin
      BASS_ChannelPlay(sound.str_music[1], True);
      BASS_ChannelSetPosition(sound.str_music[1], vGetSongPosition, BASS_POS_BYTE);
      BASS_ChannelSetAttribute(sound.str_music[1], BASS_ATTRIB_VOL, soundplayer.player_actions.volume.Vol / 100);
    end;
  end;

  uSoundplayer_Tag_Mp3_SetAll.Free;
end;

// rating system
procedure Rating_Stars(vStar: Integer; vLeave: Boolean);
var
  vi: Integer;
begin
  for vi := 0 to 9 do
  begin
    vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := True;
    vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := True;
  end;

  if vLeave = False then
  begin
    for vi := 9 downto vStar + 1 do
      vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
    for vi := 0 to vStar do
    begin
      vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := False;
      vSoundplayer.Tag.mp3.ID3v2.Rate_Glow[vi].Enabled := True;
    end;
  end
  else
  begin
    if vStar = -1 then
    begin
      for vi := 0 to 9 do
      begin
        vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
        vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := True;
      end;
    end
    else
    begin
      for vi := 0 to 9 do
        vSoundplayer.Tag.mp3.ID3v2.Rate_Glow[vi].Enabled := False;
      for vi := 9 downto soundplayer.player_actions.Tag.mp3.Rating do
        vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
      for vi := 0 to soundplayer.player_actions.Tag.mp3.Rating - 1 do
        vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := False;
    end;
  end;
end;

procedure Rating_Select_Stars(vStarNum: Byte);
var
  vi: Integer;
begin
  for vi := 0 to 9 do
    vSoundplayer.Tag.mp3.ID3v2.Rate_Glow[vi].Enabled := False;
  for vi := 9 downto vStarNum + 1 do
    vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
  for vi := 0 to vStarNum do
    vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := False;

  soundplayer.player_actions.Tag.mp3.Rating := vStarNum + 1;
  vSoundplayer.Tag.mp3.ID3v2.Rate_Label.Text := 'Rating : ' + soundplayer.player_actions.Tag.mp3.Rating.ToString + '/10';
end;

procedure Rating_RemoveAll_Stars;
var
  vi: Integer;
begin
  for vi := 0 to 9 do
  begin
    vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
    vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := True;
  end;
  soundplayer.player_actions.Tag.mp3.Rating := 0;
  vSoundplayer.Tag.mp3.ID3v2.Rate_Label.Text := 'Rating : Not Rating';
end;

procedure Rating_Save;
var
  vIndex: Integer;
  vFound: Boolean;
  vRating: Integer;
begin
  vFound := False;
  if soundplayer.player_actions.Tag.mp3.Rating_Before_Save <> soundplayer.player_actions.Tag.mp3.Rating then
  begin
    if soundplayer.player_actions.Tag.mp3.Rating > 0 then
      vRating := round((soundplayer.player_actions.Tag.mp3.Rating) * 25.5)
    else
      vRating := 0;
    for vIndex := 0 to soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount - 1 do
    begin
      if IsSameFrameID(soundplayer.player_actions.Tag.mp3.ID3v2.Frames[vIndex].ID, 'POPM') then
      begin
        soundplayer.player_actions.Tag.mp3.ID3v2.SetPopularimeter(vIndex, 'spoooky11@hotmail.gr', vRating, 0);
        vFound := True;
      end;
    end;
    if vFound = False then
    begin
      vIndex := soundplayer.player_actions.Tag.mp3.ID3v2.AddFrame('POPM');
      soundplayer.player_actions.Tag.mp3.ID3v2.SetPopularimeter(vIndex, 'spoooky11@hotmail.gr', vRating, 0);
    end;
  end;
end;

procedure Rating_Set;
var
  vi: Integer;
  vRating: Single;
begin
  for vi := 0 to 9 do
  begin
    vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := True;
    vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := True;
  end;

  vRating := Rating_Get;

  if vRating <> 0 then
  begin
    vRating := (vRating / 25.5);
    for vi := 9 downto round(vRating) do
      vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
    for vi := 0 to round(vRating) - 1 do
      vSoundplayer.Tag.mp3.ID3v2.Rate_Dot[vi].Visible := False;
    soundplayer.player_actions.Tag.mp3.Rating := round(vRating);
    soundplayer.player_actions.Tag.mp3.Rating_Before_Save := round(vRating);
    vSoundplayer.Tag.mp3.ID3v2.Rate_Label.Text := 'Rating : ' + soundplayer.player_actions.Tag.mp3.Rating.ToString + '/10';
  end
  else
  begin
    for vi := 0 to 9 do
      vSoundplayer.Tag.mp3.ID3v2.Rate[vi].Visible := False;
    soundplayer.player_actions.Tag.mp3.Rating := -1;
    soundplayer.player_actions.Tag.mp3.Rating_Before_Save := -1;
    vSoundplayer.Tag.mp3.ID3v2.Rate_Label.Text := 'Rating : Not Rating';
  end;
end;

function Rating_Get: Byte;
var
  vEmail: String;
  vRating: Byte;
  vCounter: Cardinal;
  vi: Integer;
  vFound: Boolean;
begin
  vFound := False;
  for vi := 0 to soundplayer.player_actions.Tag.mp3.ID3v2.FrameCount - 1 do
  begin
    if IsSameFrameID(soundplayer.player_actions.Tag.mp3.ID3v2.Frames[vi].ID, 'POPM') then
    begin
      vFound := True;
      if soundplayer.player_actions.Tag.mp3.ID3v2.GetPopularimeter(vi, vEmail, vRating, vCounter) = True then
        Result := vRating;
    end
  end;
  if vFound = False then
    Result := 0;
end;

end.
