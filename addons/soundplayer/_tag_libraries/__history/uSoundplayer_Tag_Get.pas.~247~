unit uSoundplayer_Tag_Get;

interface

uses
  Classes,
  System.SysUtils,
  FMX.Graphics,
  FMX.Objects,
  ID3v1Library,
  ID3v2Library,
  OggVorbisAndOpusTagLibrary,
  uSoundplayer_Playlist,
  uWindows,
  BASS;

procedure uSoundPlayer_GetTag_Details(mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);

// Get tags bases of types
procedure GetTags_MP3(mSongPath, mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);

procedure GetTags_OGG(mSongPath, mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
procedure GetTags_OGG_Cover(vSongNum: SmallInt);

procedure GetTags_MP4(mSongPath, mSongName: string);
procedure GetTags_FLAC(mSongPath, mSongName: string);
procedure GetTags_APE(mSongPath, mSongName: string);
procedure GetTags_WAV(mSongPath, mSongName: string);
procedure GetTags_WMA(mSongPath, mSongName: string);

// Load the tag Icon
procedure Set_Icon;

implementation

uses
  main,
  uload,
  uLoad_AllTypes,
  uSoundplayer_AllTypes,
  uSoundplayer_SetAll,
  uSoundplayer_Player,
  uSoundplayer_Tag_Mp3;

// Get Tags
procedure GetTags_MP3(mSongPath, mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
var
  myTag: TADDON_SOUNDPLAYER_PLAYLIST_INFO_TAG;
begin
  uSoundplayer_Tag_Mp3.Get_ID3v1(mSongPath + mSongName);
  uSoundplayer_Tag_Mp3.Get_ID3v2(mSongPath + mSongName);

  myTag.Title := addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TIT2');
  myTag.Artist := addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TPE1');
  myTag.Album := addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TALB');
  myTag.Year := addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TYER');
  myTag.Track := addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TRCK');
  myTag.Genre := addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TCON');

  // Title
  if TrimLeft(myTag.Title) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Title :=
      addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TIT2')
  else if TrimLeft(addons.soundplayer.Player.Tag.mp3.ID3v1.Title) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Title :=
      addons.soundplayer.Player.Tag.mp3.ID3v1.Title
  else
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Title := mSongName;

  // Artist
  if TrimLeft(myTag.Artist) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Artist :=
      addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TPE1')
  else
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Artist :=
      addons.soundplayer.Player.Tag.mp3.ID3v1.Artist;

  // Album
  if TrimLeft(myTag.Album) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Album :=
      addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TALB')
  else
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Album :=
      addons.soundplayer.Player.Tag.mp3.ID3v1.Album;

  // Year
  if TrimLeft(myTag.Year) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Year :=
      addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TYER')
  else
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Year := addons.soundplayer.Player.Tag.mp3.ID3v1.Year;

  // Track
  if TrimLeft(myTag.Track) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track :=
      addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TRCK')
  else
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track :=
      addons.soundplayer.Player.Tag.mp3.ID3v1.Track.ToString;

  // Genre
  if TrimLeft(myTag.Genre) <> '' then
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Genre :=
      addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeText('TCON')
  else
    addons.soundplayer.Playlist.List.Song_Info[mSongNum].Genre :=
      addons.soundplayer.Player.Tag.mp3.ID3v1.Genre;

  // Get Rate
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Rate := uSoundplayer_Tag_Mp3.Rating_Get.ToString;

  // Get Lyrics
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Lyrics := Tstringlist.Create;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Lyrics.Add(addons.soundplayer.Player.Tag.mp3.ID3v2.GetUnicodeLyrics
    ('USLT', addons.soundplayer.Player.Tag.mp3.Lyrics_LanguageID,
    addons.soundplayer.Player.Tag.mp3.Lyrics_Description));
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Lyrics.SaveToFile(addons.soundplayer.Path.Files + 'templyric.txt');

  AssignFile(vTextFile, addons.soundplayer.Path.Files + 'templyric.txt');
  Reset(vTextFile);
  while Not EOF(vTextFile) do
  begin
    Readln(vTextFile, vString);
    addons.soundplayer.Player.Tag.mp3.Lyrics.Add(vString);
  end;
  CloseFile(vTextFile);
  DeleteFile(addons.soundplayer.Path.Files+ 'templyric.txt');


  addons.soundplayer.Player.Tag.mp3.ID3v1.Free;
  addons.soundplayer.Player.Tag.mp3.ID3v2.Free;

  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Type := '.mp3';
  vSoundplayer.Player.Song_Tag.Bitmap.LoadFromFile(addons.soundplayer.Path.Images + 'sp_tag_mp3.png');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track_Seconds := mSongTime;
end;

///
procedure GetTags_OGG(mSongPath, mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
var
  myTag: TADDON_SOUNDPLAYER_PLAYLIST_INFO_TAG;
begin
  addons.soundplayer.Player.Tag.ogg.Opus := TOpusTag.Create;

  addons.soundplayer.Player.Tag.ogg.TagError := addons.soundplayer.Player.Tag.ogg.Opus.LoadFromFile
    (mSongPath + mSongName);

  myTag.Title := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('TITLE');
  myTag.Artist := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('ARTIST');
  myTag.Album := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('ALBUM');
  myTag.Genre := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('GENRE');
  myTag.Year := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('YEAR');
  myTag.Track := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('TRACK');
  myTag.Comment := addons.soundplayer.Player.Tag.ogg.Opus.ReadFrameByNameAsText('COMMENT');

  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Title := myTag.Title;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Artist := myTag.Artist;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Album := myTag.Album;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Genre := myTag.Genre;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track := myTag.Track;

  addons.soundplayer.Player.Tag.ogg.Opus.Free;

  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Type := '.ogg';
  vSoundplayer.Player.Song_Tag.Bitmap.LoadFromFile(addons.soundplayer.Path.Images + 'sp_tag_opus.png');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track_Seconds := mSongTime;
  // This below is only to not crush the program. Need to construct the rating system for ogg files
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Rate := '-1';
end;

procedure GetTags_OGG_Cover(vSongNum: SmallInt);
var
  Index: Integer;
  PictureStream: TStream;
  CoverArt: TOpusVorbisCoverArtInfo;
begin
  addons.soundplayer.Player.Tag.ogg.Opus := TOpusTag.Create;

  addons.soundplayer.Player.Tag.ogg.TagError := addons.soundplayer.Player.Tag.ogg.Opus.LoadFromFile
    (addons.soundplayer.Playlist.List.Song_Info[vSongNum].Disk_Path +
    addons.soundplayer.Playlist.List.Song_Info[vSongNum].Disk_Name +
    addons.soundplayer.Playlist.List.Song_Info[vSongNum].Disk_Type);

  if addons.soundplayer.Player.Tag.ogg.TagError = 0 then
  begin
    try
      Index := addons.soundplayer.Player.Tag.ogg.Opus.FrameExists
        (OPUSTAGLIBRARY_FRAMENAME_METADATA_BLOCK_PICTURE);
      if Index > -1 then
      begin
        PictureStream := TMemoryStream.Create;
        try
          if addons.soundplayer.Player.Tag.ogg.Opus.GetCoverArtFromFrame(Index, PictureStream, CoverArt) then
          begin
            CoverArt.MIMEType := LowerCase(CoverArt.MIMEType);
            PictureStream.Seek(0, soFromBeginning);
            vSoundplayer.info.Cover.Bitmap.LoadFromStream(PictureStream);
          end;
        finally
          FreeAndNil(PictureStream);
        end;
      end
      else
        vSoundplayer.info.Cover.Bitmap.LoadFromFile(addons.soundplayer.Path.Images + 'sp_nocover.png');
    except
      // *
    end;
  end;
  addons.soundplayer.Player.Tag.ogg.Opus.Free;
end;

///
procedure GetTags_MP4(mSongPath, mSongName: string);
begin

end;

procedure GetTags_FLAC(mSongPath, mSongName: string);
begin

end;

procedure GetTags_APE(mSongPath, mSongName: string);
begin

end;

procedure GetTags_WAV(mSongPath, mSongName: string);
begin

end;

procedure GetTags_WMA(mSongPath, mSongName: string);
begin

end;

procedure uSoundPlayer_GetTag_Details(mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
var
  vSongPath: string;
  vSongName: string;
  vSongExt: string;
begin
  SetLength(addons.soundplayer.Playlist.List.Song_Info, mSongNum + 1);
  vSongPath := ExtractFilePath(mSongName);
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Path := vSongPath;
  vSongName := ExtractFileName(mSongName);
  vSongExt := ExtractFileExt(mSongName);
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Type := vSongExt;
  Delete(vSongName, (length(vSongName) - length(vSongExt)) + 1, length(vSongExt));
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Name := vSongName;
  vSongExt := UpperCase(vSongExt);
  if vSongExt = '.MP3' then
    GetTags_MP3(vSongPath, vSongName + vSongExt, mPlaylistNum, mSongNum, mSongTime)
  else if vSongExt = '.APE' then
    GetTags_APE(vSongPath, vSongName + vSongExt)
  else if vSongExt = '.FLAC' then
    GetTags_FLAC(vSongPath, vSongName + vSongExt)
  else if vSongExt = '.MP4' then
    GetTags_MP4(vSongPath, vSongName + vSongExt)
  else if vSongExt = '.OGG' then
    GetTags_OGG(vSongPath, vSongName + vSongExt, mPlaylistNum, mSongNum, mSongTime)
  else if vSongExt = '.WAV' then
    GetTags_WAV(vSongPath, vSongName + vSongExt)
  else if vSongExt = '.WMA' then
    GetTags_WMA(vSongPath, vSongName + vSongExt);
end;

///

procedure Set_Icon;
begin
  if addons.soundplayer.Playlist.List.Song_Info[addons.soundplayer.Player.Playing_Now].Disk_Type = '.mp3' then
  begin
    vSoundplayer.Player.Song_Tag.Visible:= True;
    vSoundplayer.Player.Song_Tag.Bitmap.LoadFromFile(addons.soundplayer.Path.Images + 'sp_tag_mp3.png');
    vSoundplayer.Player.Song_KBPS.Text := addons.soundplayer.Player.Tag.mp3.info.General.BitRate.ToString
      + ' Kbps';
    vSoundplayer.Player.Song_SampleRate.Text := addons.soundplayer.Player.Tag.mp3.info.MPEG.SampleRate.
      ToString + ' Hz';
  end
  else if addons.soundplayer.Playlist.List.Song_Info[addons.soundplayer.Player.Playing_Now].Disk_Type = '.ogg'
  then
  begin
    vSoundplayer.Player.Song_Tag.Visible:= True;
    vSoundplayer.Player.Song_Tag.Bitmap.LoadFromFile(addons.soundplayer.Path.Images + 'sp_tag_opus.png')
  end
end;

end.
