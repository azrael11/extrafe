unit uSoundplayer_Actions;

interface

uses
  System.Classes,
  System.SysUtils,
  System.UiTypes,
  Bass;

procedure Load;
procedure Free;

function Playist_Data_Num(vList_Num: Integer): Integer;

procedure Start_With_Active_Playlist;
procedure Start_With_No_Playlist;
procedure Start_With_Active_Song;

procedure Hide_Animations;
procedure Set_Animations;

procedure CheckFirst(vCheched: Boolean);

procedure Get_Data;

function Time_From_Seconds(vSeconds: Integer): String;

implementation

uses
  uDB,
  uDB_AUser,
  uLoad_AllTypes,
  uSoundplayer_SetAll,
  uSoundplayer_AllTypes,
  uSoundplayer_Sounds,
  uSoundplayer_Player,
  uSoundplayer_Playlist,
  uSoundplayer_Player_Volume,
  uSoundplayer_Tag_Get,
  uSoundplayer_Tag_Mp3;

procedure Start_With_Active_Playlist;
begin
  soundplayer.player_actions.Volume.Vol := uDB_AUser.Local.ADDONS.Soundplayer_D.Volume * 100;
  soundplayer.player_actions.Song_State := 0;

  soundplayer.player_actions.list_repeat.action := rNone;
  soundplayer.player_actions.Suffle.active := True;

  extrafe.prog.State := 'addon_soundplayer';
  if uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[soundplayer.player_actions.Playlist_Now].Songs_Count = 0 then
  begin
    soundplayer.player_actions.Playing_Now := -1
    soundplayer.player := sNone;
  end
  else
  begin
    soundplayer.player_actions.Playing_Now := 0;
    soundplayer.player := sStop;
  end;

  uSoundplayer_Player.State;
  if soundplayer.player_actions.Playing_Now > -1 then
  begin
    uSoundplayer_Player.Refresh_GoTo(soundplayer.player_actions.Playing_Now);
    uSoundplayer_Playlist.State;
  end;
  soundplayer.player_actions.Volume.State := 'Master';
end;

procedure Start_With_No_Playlist;
begin
  soundplayer.player := sNone;
  uSoundplayer_Player.State;
  if uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count = -1 then
    if uDB_AUser.Local.ADDONS.Soundplayer_D.First_Pop = -1 then
      uSoundplayer_SetAll.Set_First;
end;

procedure Start_With_Active_Song;
begin
  uSoundplayer_Playlist.State;
  vSoundplayer.info.Playlist_Name.Text := uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[soundplayer.player_actions.Playlist_Now].Name;
  // vSoundplayer.info.Playlist_Type_Kind.Text := ADDONS.soundplayer.Playlist.List.VType;
  vSoundplayer.info.Total_Songs.Text := (soundplayer.player_actions.Playing_Now + 1).ToString + '/' + uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists
    [soundplayer.player_actions.Playlist_Now].Songs_Count.ToString;
  vSoundplayer.info.Time_Total.Text := '';
  vSoundplayer.timer.Song.Enabled := True;
  soundplayer.player_actions.Thumb_Active := False;
  if soundplayer.player_actions.Suffle.active then
  begin
    uSoundplayer_Player.Repeat_Back;
    uSoundplayer_Player.Suffle_Back;
    uSoundplayer_Player.Set_Previous_Next;
  end
  else
  begin
    uSoundplayer_Player.Get_Tag(soundplayer.player_actions.Playing_Now);
    uSoundplayer_Tag_Get.Set_Icon;
    soundplayer.player_actions.Suffle.active := not soundplayer.player_actions.Suffle.active;
    vSoundplayer.Playlist.List.Selected := soundplayer.player_actions.Playing_Now + 1;
    uSoundplayer_Player.State;
  end;
  uSoundplayer_Player_Volume.Adjust(False);
end;

procedure Load;
begin
  extrafe.prog.State := 'addon_soundplayer_loading';

  uSoundplayer_Sounds.Load;
  soundplayer.player_actions.Playlist_Now := Playist_Data_Num(uDB_AUser.Local.ADDONS.Soundplayer_D.Last_Playlist_Num);

  if soundplayer.player = sPlay then
    Start_With_Active_Song
  else
  begin
    if (uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count <> -1) then
      Start_With_Active_Playlist
    else
      Start_With_No_Playlist;
  end;

  Set_Animations;
  extrafe.prog.State := 'addon_soundplayer';
  uSoundplayer_Player_Volume.Update(uDB_AUser.Local.ADDONS.Soundplayer_D.Volume);
end;

procedure Free;
begin
  if Assigned(vSoundplayer.scene.soundplayer) then
  begin
    if soundplayer.player = sPlay then
      uSoundplayer_Player_Volume.Adjust(True);
    uSoundplayer_Sounds.Free;
    FreeAndNil(vSoundplayer.scene.soundplayer);
  end;
end;

procedure Set_Animations;
begin
  vSoundplayer.info.Back_Left.Position.X := 2;
  vSoundplayer.info.Back_Left_Ani.StartValue := 2;
  vSoundplayer.info.Back_Left_Ani.StopValue := -558;

  vSoundplayer.info.Back_Right.Position.X := 1318;
  vSoundplayer.info.Back_Right_Ani.StartValue := 1318;
  vSoundplayer.info.Back_Right_Ani.StopValue := 1878;

  vSoundplayer.info.Back_Left_Ani.Start;
  vSoundplayer.info.Back_Right_Ani.Start;

  ADDONS.soundplayer.info.isCoverInFullscreen := False;
end;

procedure Hide_Animations;
begin
  vSoundplayer.info.Back_Left_Ani.Stop;
  vSoundplayer.info.Back_Right_Ani.Stop;

  vSoundplayer.info.Back_Left.Position.X := -558;
  vSoundplayer.info.Back_Right.Position.X := 1878;

  ADDONS.soundplayer.info.isCoverInFullscreen := False;
end;

procedure CheckFirst(vCheched: Boolean);
var
  vCheck: Integer;
begin
  ADDONS.soundplayer.Actions.First := vCheched;

  vCheck := 0;
  if vCheched then
    vCheck := 1;

  uDB.ExtraFE_Query_Local.Close;
  uDB.ExtraFE_Query_Local.SQL.Clear;
  uDB.ExtraFE_Query_Local.SQL.Text := 'UPDATE addon_soundplayer SET First_Pop=''' + vCheck.ToString + ''' WHERE User_Id=''' +
    uDB_AUser.Local.USER.Num.ToString + '''';
  uDB.ExtraFE_Query_Local.ExecSQL;

end;

procedure Get_Data;
var
  vQuery: String;
  vi, vk, vl: Integer;
begin
  vQuery := 'SELECT * FROM ADDON_SOUNDPLAYER WHERE USER_ID=' + uDB_AUser.Local.USER.Num.ToString;
  uDB.ExtraFE_Query_Local.Close;
  uDB.ExtraFE_Query_Local.SQL.Clear;
  uDB.ExtraFE_Query_Local.SQL.Add(vQuery);
  uDB.ExtraFE_Query_Local.Open;
  uDB.ExtraFE_Query_Local.First;

  uDB_AUser.Local.ADDONS.Soundplayer_D.Menu_Position := uDB.ExtraFE_Query_Local.FieldByName('Menu_Position').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.First_Pop := uDB.ExtraFE_Query_Local.FieldByName('First_Pop').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.Volume := uDB.ExtraFE_Query_Local.FieldByName('Volume').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.Last_Visit := uDB.ExtraFE_Query_Local.FieldByName('Last_Visit').AsString;
  uDB_AUser.Local.ADDONS.Soundplayer_D.Last_Playlist_Num := uDB.ExtraFE_Query_Local.FieldByName('Last_Playlist_Num').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count := uDB.ExtraFE_Query_Local.FieldByName('Playlist_Count').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.Total_Play_Click := uDB.ExtraFE_Query_Local.FieldByName('Total_Play').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.Total_Play_Time := uDB.ExtraFE_Query_Local.FieldByName('Total_Time').AsInteger;
  uDB_AUser.Local.ADDONS.Soundplayer_D.p_Images := uDB.ExtraFE_Query_Local.FieldByName('Path_Images').AsString;
  uDB_AUser.Local.ADDONS.Soundplayer_D.p_Sounds := uDB.ExtraFE_Query_Local.FieldByName('Path_Sounds').AsString;

  vl := 0;
  if uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count <> -1 then
  begin
    SetLength(uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists, uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count + 1);

    for vi := 0 to uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count do
    begin
      vQuery := 'SELECT * FROM addon_soundplayer_playlists WHERE User_Id=''' + uDB_AUser.Local.USER.Num.ToString + '''';
      uDB.ExtraFE_Query_Local.Close;
      uDB.ExtraFE_Query_Local.SQL.Clear;
      uDB.ExtraFE_Query_Local.SQL.Add(vQuery);
      uDB.ExtraFE_Query_Local.Open;
      uDB.ExtraFE_Query_Local.First;

      uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Name := uDB.ExtraFE_Query_Local.FieldByName('Name').AsString;
      uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Pos_Num := uDB.ExtraFE_Query_Local.FieldByName('Pos').AsInteger;
      uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].ID := uDB.ExtraFE_Query_Local.FieldByName('Id').AsInteger;
      uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs_Count := uDB.ExtraFE_Query_Local.FieldByName('Songs_Count').AsInteger;
      uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].active := uDB.ExtraFE_Query_Local.FieldByName('Active').AsInteger;

      if uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vi].Songs_Count > 0 then
      begin

        vQuery := 'SELECT * FROM addon_soundplayer_playlists_songs WHERE Playlist_Num=''' + uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl]
          .ID.ToString + '''';
        uDB.ExtraFE_Query_Local.Close;
        uDB.ExtraFE_Query_Local.SQL.Clear;
        uDB.ExtraFE_Query_Local.SQL.Add(vQuery);
        uDB.ExtraFE_Query_Local.Open;
        uDB.ExtraFE_Query_Local.First;

        SetLength(uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs, uDB.ExtraFE_Query_Local.RecordCount);

        vk := 0;
        while not uDB.ExtraFE_Query_Local.Eof do
        begin
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Name := uDB.ExtraFE_Query_Local.FieldByName('Song_Name').AsString;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Name := StringReplace(uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Name,
            '~%', '''', [rfReplaceAll, rfIgnoreCase]);
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Artist := uDB.ExtraFE_Query_Local.FieldByName('Song_Artist').AsString;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Path_Name := uDB.ExtraFE_Query_Local.FieldByName('Song_Path_Name').AsString;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Path_Name :=
            StringReplace(uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Path_Name, '~%', '''', [rfReplaceAll, rfIgnoreCase]);
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Path := uDB.ExtraFE_Query_Local.FieldByName('Song_Path').AsString;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Audio_Type := uDB.ExtraFE_Query_Local.FieldByName('Song_Audio_Type').AsString;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Pos := uDB.ExtraFE_Query_Local.FieldByName('Song_Position').AsInteger;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Time := uDB.ExtraFE_Query_Local.FieldByName('Song_Time').AsInteger;
          uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vl].Songs[vk].Last := uDB.ExtraFE_Query_Local.FieldByName('Song_Last').AsInteger;

          inc(vk);
          uDB.ExtraFE_Query_Local.Next;
        end;
      end
      else
        soundplayer.player_actions.Playing_Now := -1;

      inc(vl);
    end;
  end;

  if uDB_AUser.Local.ADDONS.Soundplayer_D.Menu_Position <> -1 then
  begin
    uDB_AUser.Local.ADDONS.Names.Insert(uDB_AUser.Local.ADDONS.Soundplayer_D.Menu_Position, 'soundplayer');
    uDB_AUser.Local.ADDONS.Names.Delete(uDB_AUser.Local.ADDONS.Soundplayer_D.Menu_Position + 1);
  end;

  if extrafe.prog.State <> 'addon_soundplayer' then
    soundplayer.player := sStop;

end;

function Playist_Data_Num(vList_Num: Integer): Integer;
var
  vi: Integer;
begin
  for vi := 0 to uDB_AUser.Local.ADDONS.Soundplayer_D.Playlist_Count do
    if uDB_AUser.Local.ADDONS.Soundplayer_D.Playlists[vi].ID = vList_Num then
      Break;

  Result := vi;
end;

function Time_From_Seconds(vSeconds: Integer): String;
begin
  Result := FormatDateTime('nn:ss', EncodeTime(0, vSeconds div 60, vSeconds mod 60, 0));
end;

end.
