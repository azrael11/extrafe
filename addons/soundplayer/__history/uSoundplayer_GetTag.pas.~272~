unit uSoundplayer_GetTag;

interface

uses
  Classes,
  System.SysUtils,
  FMX.Graphics,
  FMX.Objects,
  ID3v2Library,
  uSoundplayer_Playlist_Actions,
  uWindows,
  BASS;

procedure uSoundPlayer_GetTag_Details(mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);

// Get tags bases of types
procedure GetTags_MP3(mSongPath, mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
procedure GetTags_OGG(mSongPath, mSongName: string);
procedure GetTags_MP4(mSongPath, mSongName: string);
procedure GetTags_FLAC(mSongPath, mSongName: string);
procedure GetTags_APE(mSongPath, mSongName: string);
procedure GetTags_WAV(mSongPath, mSongName: string);
procedure GetTags_WMA(mSongPath, mSongName: string);

// Get the cover image
procedure GetTags_GetCover_Image(mSong: string);
function GetTags_LoadAPic(mNum: Integer): Boolean;

var
  vMP3_Tag: TID3v2Tag;
  vCurrentAPICIndex: Integer = -1;
  A_SP_Cover: TImage;

implementation

uses
  main,
  uload,
  uLoad_AllTypes,
  uSoundplayer_AllTypes,
  uSoundplayer_SetAll,
  uSoundplayer_Player_Actions;

// Get Tags
procedure GetTags_MP3(mSongPath, mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
var
  vTagError: Integer;
begin
  vMP3_Tag := TID3v2Tag.Create;

  vTagError := vMP3_Tag.LoadFromFile(mSongPath + mSongName);
  if vTagError <> ID3V2LIBRARY_SUCCESS then
    // Show an error message
    if vTagError <> ID3V2LIBRARY_SUCCESS then
      // Get major and minor version num of mp3
      vMP3_Tag.Unsynchronised := True;
  vMP3_Tag.RemoveUnsynchronisationOnAllFrames;
  vMP3_Tag.ExtendedHeader := True;
  vMP3_Tag.ExtendedHeader3.CRCPresent := True;

  vMP3_Tag.Loaded := True;

  SetLength(addons.soundplayer.Playlist.List.Song_Info, mSongNum + 1);

  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Name := mSongName;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Path := mSongPath;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Disk_Type := '.mp3';

  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Title := vMP3_Tag.GetUnicodeText('TIT2');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Artist := vMP3_Tag.GetUnicodeText('TPE1');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Album := vMP3_Tag.GetUnicodeText('TALB');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Year := vMP3_Tag.GetUnicodeText('TYER');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track := vMP3_Tag.GetUnicodeText('TRCK');
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Genre := vMP3_Tag.GetUnicodeText('TCON');

  vMP3_Tag.Free;
  addons.soundplayer.Playlist.List.Song_Info[mSongNum].Track_Seconds := mSongTime;
end;

procedure GetTags_OGG(mSongPath, mSongName: string);
begin

end;

procedure GetTags_MP4(mSongPath, mSongName: string);
begin

end;

procedure GetTags_FLAC(mSongPath, mSongName: string);
begin

end;

procedure GetTags_APE(mSongPath, mSongName: string);
begin

end;

procedure GetTags_WAV(mSongPath, mSongName: string);
begin

end;

procedure GetTags_WMA(mSongPath, mSongName: string);
begin

end;

procedure uSoundPlayer_GetTag_Details(mSongName: string; mPlaylistNum, mSongNum: SmallInt; mSongTime: string);
var
  vSongPath: string;
  vSongName: string;
  vSongExt: string;
begin
  vSongPath := ExtractFilePath(mSongName);
  vSongName := ExtractFileName(mSongName);
  vSongExt := ExtractFileExt(mSongName);
  if vSongExt = '.mp3' then
    GetTags_MP3(vSongPath, vSongName, mPlaylistNum, mSongNum, mSongTime)
  else if vSongExt = '.ape' then
    GetTags_APE(vSongPath, vSongName)
  else if vSongExt = '.flac' then
    GetTags_FLAC(vSongPath, vSongName)
  else if vSongExt = '.mp4' then
    GetTags_MP4(vSongPath, vSongName)
  else if vSongExt = '.ogg' then
    GetTags_OGG(vSongPath, vSongName)
  else if vSongExt = '.wav' then
    GetTags_WAV(vSongPath, vSongName)
  else if vSongExt = '.wma' then
    GetTags_WMA(vSongPath, vSongName);
end;

/// /////////////////////////////////////////////////////////////////////////////
/// Get the cover image
procedure GetTags_GetCover_Image(mSong: string);
var
  vTagError: Integer;
  vcomp: TComponent;
begin
  vMP3_Tag := TID3v2Tag.Create;

  vTagError := vMP3_Tag.LoadFromFile(mSong);
  if vTagError <> ID3V2LIBRARY_SUCCESS then
    // Show an error message
    if vTagError <> ID3V2LIBRARY_SUCCESS then
      // Get major and minor version num of mp3

      vMP3_Tag.Unsynchronised := True;
  vMP3_Tag.RemoveUnsynchronisationOnAllFrames;
  vMP3_Tag.ExtendedHeader := True;
  vMP3_Tag.ExtendedHeader3.CRCPresent := True;

  vMP3_Tag.Loaded := True;

  GetTags_LoadAPic(0);
  vMP3_Tag.Free;
end;

function GetTags_LoadAPic(mNum: Integer): Boolean;
var
  PictureType: Integer;
  PictureStream: TStream;
  Success: Boolean;
  MIMEType: String;
  Description: String;
  i: Integer;
begin
  Result := False;
  try
    PictureStream := TMemoryStream.Create;
    try
      if mNum = 0 then
      begin
        mNum := vMP3_Tag.FrameExists('APIC');
      end;
      if mNum < 0 then
      begin
        vSoundplayer.info.Cover.Bitmap.LoadFromFile(addons.soundplayer.Path.Images + 'sp_nocover.png');
        Exit;
      end;

      Success := vMP3_Tag.GetUnicodeCoverPictureStream(mNum, PictureStream, MIMEType, Description,
        PictureType);
      // * No APIC picture found, exit
      if (PictureStream.Size = 0) OR (NOT Success) then
      begin
        Exit;
      end;

      // * Get first APIC index
      if mNum = 0 then
      begin
        for i := 0 to vMP3_Tag.FrameCount - 1 do
        begin
          if IsSameFrameID(vMP3_Tag.Frames[i].ID, 'APIC') then
          begin
            vCurrentAPICIndex := i;
            Break;
          end;
        end;
        // * Store the current APIC index as Index is frame index
      end
      else
      begin
        vCurrentAPICIndex := mNum;
      end;

      // * Display description
      // Edit21.Text := Description;
      // * Display type
      // Label24.Text := APICType2Str(PictureType);
      // * Do what you want with PictureStream here
      // * We load the APIC picture into a TImageControl
      // * If JPG
      {
        if (MIMEType = 'image/jpeg')
        OR (MIMEType = 'image/jpg')
        then begin
      }
      {
        PictureStream.Seek(0, soFromBeginning);
        TempBitmap := TBitmap.Create(0, 0);
        Filter := DefaultBitmapCodecClass.Create;
        try
        Filter.LoadFromStream(PictureStream, TempBitmap);
        ImageControl1.Bitmap.Assign(TempBitmap);
        finally
        Filter.Free;
        TempBitmap.Free;
        end;
      }

      vSoundplayer.info.Cover.Bitmap.LoadFromStream(PictureStream);
      // A_SP_Cover.Bitmap.LoadFromStream(PictureStream);

      { end; }

      // * The APIC stream format can be decided from MIMEType for example:
      // * If BMP
      {
        if MIMEType = 'image/bmp' then begin
        PictureStream.Seek(0, soFromBeginning);
        ImageControl1.Bitmap.LoadFromStream(PictureStream);
        end;
      }
      // * To load other formats a third party component is needed, for example GraphicEx or Free Image Library (for Windows)
      Result := True;
    finally
      PictureStream.Free;
    end;
  except
    // *
  end;
end;

end.
